
axiomatic Padding {

  logic type padding
  
}

type _bool = 0..1

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag char_xP = {
  charP[..] char_xM: 64;
}

type char_xP = [char_xP]

charP[..] hex_asc;

_bool escape_null(uint8 c_0, char_xP[..] dst_0, charP[..] end_1)
  requires ((_C_49 : (((_C_51 : \at((((\offset_min(\at(end_1,Here)) <=
                                        \at(0,Here)) &&
                                       (\offset_max(\at(end_1,Here)) >=
                                         \at(0,Here))) &&
                                      true),Here)) &&
                        (_C_52 : \at((((\offset_min(\at(dst_0,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(dst_0,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here))) &&
                       (_C_53 : \at((((\offset_min(\at(dst_0.char_xM,Here)) <=
                                        \at(0,Here)) &&
                                       (\offset_max(\at(dst_0.char_xM,Here)) >=
                                         \at(1,Here))) &&
                                      (true && true)),Here)))) &&
             (_C_54 : (\base_block(dst_0.char_xM) == \base_block(end_1))));
behavior default:
  ensures true;
behavior is_empty:
  assumes (c_0 != (0 :> uint8));
  assigns \nothing;
  ensures (_C_22 : (((\result :> integer) != 0) == false));
behavior size_zero:
  assumes ((c_0 == (0 :> uint8)) &&
            ((\base_block(dst_0.char_xM) == \base_block(end_1)) &&
              ((dst_0.char_xM - end_1) >= 0)));
  assigns dst_0.char_xM;
  ensures (_C_23 : ((_C_24 : (\at(dst_0,Old).char_xM ==
                               \at((dst_0.char_xM + 2),Old))) &&
                     (_C_25 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes ((c_0 == (0 :> uint8)) && ((dst_0.char_xM + 1) == end_1));
  assigns dst_0.char_xM,
  dst_0.char_xM.charM;
  ensures (_C_26 : ((_C_27 : (\at(dst_0,Old).char_xM ==
                               \at((dst_0.char_xM + 2),Old))) &&
                     ((_C_29 : ((\at(dst_0,Old).char_xM - 2).charM ==
                                 (92 :> int8))) &&
                       (_C_30 : (((\result :> integer) != 0) == true)))));
behavior size_two:
  assumes ((c_0 == (0 :> uint8)) &&
            ((\base_block((dst_0.char_xM + 1)) == \base_block(end_1)) &&
              (((dst_0.char_xM + 1) - end_1) < 0)));
  assigns dst_0.char_xM,
  dst_0.char_xM.charM,
  (dst_0.char_xM + 1).charM;
  ensures (_C_31 : ((_C_32 : (\at(dst_0,Old).char_xM ==
                               \at((dst_0.char_xM + 2),Old))) &&
                     ((_C_34 : ((\at(dst_0,Old).char_xM - 2).charM ==
                                 (92 :> int8))) &&
                       ((_C_36 : ((\at(dst_0,Old).char_xM - 1).charM ==
                                   (48 :> int8))) &&
                         (_C_37 : (((\result :> integer) != 0) == true))))));
{  
   (var charP[..] out);
   
   (var _bool __retres);
   
   {  (_C_2 : (out = (_C_1 : dst_0.char_xM)));
      (if (_C_5 : ((c_0 :> uint8) != (0 :> uint8))) then 
      {  (_C_4 : (__retres = (_C_3 : ((0 :> int32) :> _bool))));
         
         (goto return_label)
      } else ());
      (if (_C_9 : ((out - end_1) < 0)) then (_C_8 : ((_C_7 : out.charM) = 
                                            (_C_6 : ((92 :> int32) :> int8)))) else ());
      (_C_11 : (out = (_C_10 : (out + (1 :> int32)))));
      (if (_C_15 : ((out - end_1) < 0)) then (_C_14 : ((_C_13 : out.charM) = 
                                             (_C_12 : ((48 :> int32) :> int8)))) else ());
      (_C_17 : (out = (_C_16 : (out + (1 :> int32)))));
      (_C_19 : ((_C_18 : dst_0.char_xM) = out));
      (_C_21 : (__retres = (_C_20 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres))
   }
}

_bool escape_octal(uint8 c_1, char_xP[..] dst_1, charP[..] end_2)
  requires ((_C_149 : (((_C_151 : \at((((\offset_min(\at(end_2,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(end_2,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_152 : \at((((\offset_min(\at(dst_1,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_1,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_153 : \at((((\offset_min(\at(dst_1.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst_1.char_xM,Here)) >=
                                           \at(3,Here))) &&
                                        (true && (true && (true && true)))),Here)))) &&
             (_C_154 : (\base_block(dst_1.char_xM) == \base_block(end_2))));
behavior default:
  ensures true;
behavior size_zero:
  assumes ((\base_block(dst_1.char_xM) == \base_block(end_2)) &&
            ((dst_1.char_xM - end_2) >= 0));
  assigns dst_1.char_xM;
  ensures (_C_105 : ((_C_106 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 4),Old))) &&
                      (_C_107 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes ((dst_1.char_xM + 1) == end_2);
  assigns dst_1.char_xM,
  dst_1.char_xM.charM;
  ensures (_C_108 : ((_C_109 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 4),Old))) &&
                      ((_C_111 : ((\at(dst_1,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        (_C_112 : (((\result :> integer) != 0) == true)))));
behavior size_two:
  assumes ((dst_1.char_xM + 2) == end_2);
  assigns dst_1.char_xM,
  dst_1.char_xM.charM,
  (dst_1.char_xM + 1).charM;
  ensures (_C_113 : ((_C_114 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 4),Old))) &&
                      ((_C_116 : ((\at(dst_1,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_118 : (((\at(dst_1,Old).char_xM - 3).charM :> integer) ==
                                     ((((\at(c_1,Old) :> integer) / 64) % 7) +
                                       ((48 :> int8) :> integer)))) &&
                          (_C_119 : (((\result :> integer) != 0) == true))))));
behavior size_three:
  assumes ((dst_1.char_xM + 3) == end_2);
  assigns dst_1.char_xM,
  dst_1.char_xM.charM,
  (dst_1.char_xM + 1).charM,
  (dst_1.char_xM + 2).charM;
  ensures (_C_120 : ((_C_121 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 4),Old))) &&
                      ((_C_123 : ((\at(dst_1,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_125 : (((\at(dst_1,Old).char_xM - 3).charM :> integer) ==
                                     ((((\at(c_1,Old) :> integer) / 64) % 7) +
                                       ((48 :> int8) :> integer)))) &&
                          ((_C_127 : (((\at(dst_1,Old).char_xM - 2).charM :> integer) ==
                                       ((((\at(c_1,Old) :> integer) / 8) % 7) +
                                         ((48 :> int8) :> integer)))) &&
                            (_C_128 : (((\result :> integer) != 0) == true)))))));
behavior size_four:
  assumes ((\base_block((dst_1.char_xM + 4)) == \base_block(end_2)) &&
            (((dst_1.char_xM + 4) - end_2) <= 0));
  assigns dst_1.char_xM,
  dst_1.char_xM.charM,
  (dst_1.char_xM + 1).charM,
  (dst_1.char_xM + 2).charM,
  (dst_1.char_xM + 3).charM;
  ensures (_C_129 : ((_C_130 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 4),Old))) &&
                      ((_C_132 : ((\at(dst_1,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_134 : (((\at(dst_1,Old).char_xM - 3).charM :> integer) ==
                                     ((((\at(c_1,Old) :> integer) / 64) % 7) +
                                       ((48 :> int8) :> integer)))) &&
                          ((_C_136 : (((\at(dst_1,Old).char_xM - 2).charM :> integer) ==
                                       ((((\at(c_1,Old) :> integer) / 8) % 7) +
                                         ((48 :> int8) :> integer)))) &&
                            ((_C_138 : (((\at(dst_1,Old).char_xM - 1).charM :> integer) ==
                                         (((\at(c_1,Old) :> integer) % 7) +
                                           ((48 :> int8) :> integer)))) &&
                              (_C_139 : (((\result :> integer) != 0) == true))))))));
{  
   (var charP[..] out_0);
   
   (var _bool __retres_0);
   
   {  (_C_56 : (out_0 = (_C_55 : dst_1.char_xM)));
      (if (_C_60 : ((out_0 - end_2) < 0)) then (_C_59 : ((_C_58 : out_0.charM) = 
                                               (_C_57 : ((92 :> int32) :> int8)))) else ());
      (_C_62 : (out_0 = (_C_61 : (out_0 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_63 : (jessie : (out_0 ==
                                                   (dst_1.char_xM + 1)))));
         ()
      };
      
      {  (if (_C_73 : ((out_0 - end_2) < 0)) then (_C_72 : ((_C_71 : out_0.charM) = 
                                                  (_C_70 : ((_C_69 : 
                                                            ((_C_68 : (
                                                             (_C_67 : 
                                                             ((_C_66 : (
                                                              (_C_65 : 
                                                              ((_C_64 : (c_1 :> int32)) /
                                                                (64 :> int32))) :> int32)) %
                                                               (7 :> int32))) :> int32)) +
                                                              (48 :> int32))) :> int8)))) else ())
      };
      (_C_75 : (out_0 = (_C_74 : (out_0 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_76 : (jessie : (out_0 ==
                                                   (dst_1.char_xM + 2)))));
         ()
      };
      
      {  (if (_C_86 : ((out_0 - end_2) < 0)) then (_C_85 : ((_C_84 : out_0.charM) = 
                                                  (_C_83 : ((_C_82 : 
                                                            ((_C_81 : (
                                                             (_C_80 : 
                                                             ((_C_79 : (
                                                              (_C_78 : 
                                                              ((_C_77 : (c_1 :> int32)) /
                                                                (8 :> int32))) :> int32)) %
                                                               (7 :> int32))) :> int32)) +
                                                              (48 :> int32))) :> int8)))) else ())
      };
      (_C_88 : (out_0 = (_C_87 : (out_0 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_89 : (jessie : (out_0 ==
                                                   (dst_1.char_xM + 3)))));
         ()
      };
      
      {  (if (_C_97 : ((out_0 - end_2) < 0)) then (_C_96 : ((_C_95 : out_0.charM) = 
                                                  (_C_94 : ((_C_93 : 
                                                            ((_C_92 : (
                                                             (_C_91 : 
                                                             ((_C_90 : (c_1 :> int32)) %
                                                               (7 :> int32))) :> int32)) +
                                                              (48 :> int32))) :> int8)))) else ())
      };
      (_C_99 : (out_0 = (_C_98 : (out_0 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_100 : (jessie : (out_0 ==
                                                    (dst_1.char_xM + 4)))));
         ()
      };
      (_C_102 : ((_C_101 : dst_1.char_xM) = out_0));
      (_C_104 : (__retres_0 = (_C_103 : ((1 :> int32) :> _bool))));
      
      (return __retres_0)
   }
}

_bool escape_passthrough(uint8 c_2, char_xP[..] dst_2, charP[..] end_3)
  requires ((_C_181 : (((_C_183 : \at((((\offset_min(\at(end_3,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(end_3,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_184 : \at((((\offset_min(\at(dst_2,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_2,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_185 : \at((((\offset_min(\at(dst_2.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst_2.char_xM,Here)) >=
                                           \at(1,Here))) &&
                                        (true && true)),Here)))) &&
             (_C_186 : (\base_block(dst_2.char_xM) == \base_block(end_3))));
behavior default:
  ensures true;
behavior size_zero:
  assumes ((\base_block(dst_2.char_xM) == \base_block(end_3)) &&
            ((dst_2.char_xM - end_3) >= 0));
  assigns dst_2.char_xM;
  ensures (_C_167 : ((_C_168 : (\at(dst_2,Old).char_xM ==
                                 \at((dst_2.char_xM + 1),Old))) &&
                      (_C_169 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes ((\base_block(dst_2.char_xM) == \base_block(end_3)) &&
            ((dst_2.char_xM - end_3) < 0));
  assigns dst_2.char_xM,
  dst_2.char_xM.charM;
  ensures (_C_170 : ((_C_171 : (\at(dst_2,Old).char_xM ==
                                 \at((dst_2.char_xM + 1),Old))) &&
                      ((_C_173 : (\at(dst_2.char_xM.charM,Old) ==
                                   (\at(c_2,Old) :> int8))) &&
                        (_C_174 : (((\result :> integer) != 0) == true)))));
{  
   (check (disjoint_behaviors : (! (((\base_block(dst_2.char_xM) ==
                                       \base_block(end_3)) &&
                                      ((dst_2.char_xM - end_3) >= 0)) &&
                                     ((\base_block(dst_2.char_xM) ==
                                        \base_block(end_3)) &&
                                       ((dst_2.char_xM - end_3) < 0))))));
   
   (check (complete_behaviors : (((\base_block(dst_2.char_xM) ==
                                    \base_block(end_3)) &&
                                   ((dst_2.char_xM - end_3) < 0)) ||
                                  ((\base_block(dst_2.char_xM) ==
                                     \base_block(end_3)) &&
                                    ((dst_2.char_xM - end_3) >= 0)))));
   
   (var charP[..] out_1);
   
   (var _bool __retres_1);
   
   {  (_C_156 : (out_1 = (_C_155 : dst_2.char_xM)));
      (if (_C_161 : ((out_1 - end_3) < 0)) then 
      {  
         {  
            (assert for default: (_C_157 : (jessie : (out_1 == dst_2.char_xM))));
            ()
         };
         (_C_160 : ((_C_159 : out_1.charM) = (_C_158 : (c_2 :> int8))))
      } else ());
      (_C_164 : ((_C_163 : dst_2.char_xM) = (_C_162 : (out_1 + (1 :> int32)))));
      (_C_166 : (__retres_1 = (_C_165 : ((1 :> int32) :> _bool))));
      
      (return __retres_1)
   }
}

axiomatic Es_Space {

  logic int8 escape_space(integer ch)
   
  axiom N :
  (_C_187 : (escape_space(((10 :> int8) :> integer)) == (110 :> int8)))
   
  axiom R :
  (_C_188 : (escape_space(((13 :> int8) :> integer)) == (114 :> int8)))
   
  axiom T :
  (_C_189 : (escape_space(((9 :> int8) :> integer)) == (116 :> int8)))
   
  axiom V :
  (_C_190 : (escape_space(((11 :> int8) :> integer)) == (118 :> int8)))
   
  axiom F :
  (_C_191 : (escape_space(((12 :> int8) :> integer)) == (102 :> int8)))
  
}

_bool escape_space(uint8 c_3, char_xP[..] dst_3, charP[..] end_4)
  requires ((_C_263 : (((_C_265 : \at((((\offset_min(\at(end_4,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(end_4,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_266 : \at((((\offset_min(\at(dst_3,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_3,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_267 : \at((((\offset_min(\at(dst_3.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst_3.char_xM,Here)) >=
                                           \at(1,Here))) &&
                                        (true && true)),Here)))) &&
             (_C_268 : (\base_block(dst_3.char_xM) == \base_block(end_4))));
behavior default:
  ensures true;
behavior is_empty:
  assumes ((((((c_3 :> integer) != ((10 :> int8) :> integer)) &&
               ((c_3 :> integer) != ((9 :> int8) :> integer))) &&
              ((c_3 :> integer) != ((13 :> int8) :> integer))) &&
             ((c_3 :> integer) != ((11 :> int8) :> integer))) &&
            ((c_3 :> integer) != ((12 :> int8) :> integer)));
  assigns \nothing;
  ensures (_C_228 : (((\result :> integer) != 0) == false));
behavior size_zero:
  assumes (((((((c_3 :> integer) == ((10 :> int8) :> integer)) ||
                ((c_3 :> integer) == ((9 :> int8) :> integer))) ||
               ((c_3 :> integer) == ((13 :> int8) :> integer))) ||
              ((c_3 :> integer) == ((11 :> int8) :> integer))) ||
             ((c_3 :> integer) == ((12 :> int8) :> integer))) &&
            ((\base_block(dst_3.char_xM) == \base_block(end_4)) &&
              ((dst_3.char_xM - end_4) >= 0)));
  assigns dst_3.char_xM;
  ensures (_C_229 : ((_C_230 : (\at(dst_3,Old).char_xM ==
                                 \at((dst_3.char_xM + 2),Old))) &&
                      (_C_231 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes (((((((c_3 :> integer) == ((10 :> int8) :> integer)) ||
                ((c_3 :> integer) == ((9 :> int8) :> integer))) ||
               ((c_3 :> integer) == ((13 :> int8) :> integer))) ||
              ((c_3 :> integer) == ((11 :> int8) :> integer))) ||
             ((c_3 :> integer) == ((12 :> int8) :> integer))) &&
            ((dst_3.char_xM + 1) == end_4));
  assigns dst_3.char_xM,
  dst_3.char_xM.charM;
  ensures (_C_232 : ((_C_233 : (\at(dst_3,Old).char_xM ==
                                 \at((dst_3.char_xM + 2),Old))) &&
                      ((_C_235 : ((\at(dst_3,Old).char_xM - 2).charM ==
                                   (92 :> int8))) &&
                        (_C_236 : (((\result :> integer) != 0) == true)))));
behavior size_two:
  assumes (((((((c_3 :> integer) == ((10 :> int8) :> integer)) ||
                ((c_3 :> integer) == ((9 :> int8) :> integer))) ||
               ((c_3 :> integer) == ((13 :> int8) :> integer))) ||
              ((c_3 :> integer) == ((11 :> int8) :> integer))) ||
             ((c_3 :> integer) == ((12 :> int8) :> integer))) &&
            ((\base_block((dst_3.char_xM + 1)) == \base_block(end_4)) &&
              (((dst_3.char_xM + 1) - end_4) < 0)));
  assigns dst_3.char_xM,
  dst_3.char_xM.charM,
  (dst_3.char_xM + 1).charM;
  ensures (_C_237 : ((_C_238 : (\at(dst_3,Old).char_xM ==
                                 \at((dst_3.char_xM + 2),Old))) &&
                      ((_C_240 : ((\at(dst_3,Old).char_xM - 2).charM ==
                                   (92 :> int8))) &&
                        ((_C_242 : ((\at(dst_3,Old).char_xM - 1).charM ==
                                     escape_space((\at(c_3,Old) :> integer)))) &&
                          (_C_243 : (((\result :> integer) != 0) == true))))));
{  
   (var charP[..] out_2);
   
   (var uint8 to);
   
   (var _bool __retres_2);
   
   {  (_C_193 : (out_2 = (_C_192 : dst_3.char_xM)));
      
      switch ((_C_211 : (c_3 :> int32))) {
        case (_C_194 : (10 :> int32)):
        {  (_C_196 : (to = (_C_195 : ((110 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_197 : (13 :> int32)):
        {  (_C_199 : (to = (_C_198 : ((114 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_200 : (9 :> int32)):
        {  (_C_202 : (to = (_C_201 : ((116 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_203 : (11 :> int32)):
        {  (_C_205 : (to = (_C_204 : ((118 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_206 : (12 :> int32)):
        {  (_C_208 : (to = (_C_207 : ((102 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        default:
        {  ();
           (_C_210 : (__retres_2 = (_C_209 : ((0 :> int32) :> _bool))));
           
           (goto return_label)
        }
      };
      (switch_0_break : ());
      (if (_C_215 : ((out_2 - end_4) < 0)) then (_C_214 : ((_C_213 : out_2.charM) = 
                                                (_C_212 : ((92 :> int32) :> int8)))) else ());
      (_C_217 : (out_2 = (_C_216 : (out_2 + (1 :> int32)))));
      (if (_C_221 : ((out_2 - end_4) < 0)) then (_C_220 : ((_C_219 : out_2.charM) = 
                                                (_C_218 : (to :> int8)))) else ());
      (_C_223 : (out_2 = (_C_222 : (out_2 + (1 :> int32)))));
      (_C_225 : ((_C_224 : dst_3.char_xM) = out_2));
      (_C_227 : (__retres_2 = (_C_226 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres_2))
   }
}

axiomatic Es_Special {

  logic int8 escape_special(integer ch_0)
   
  axiom Sl :
  (_C_269 : (escape_special(((92 :> int8) :> integer)) == (92 :> int8)))
   
  axiom A :
  (_C_270 : (escape_special(((7 :> int8) :> integer)) == (97 :> int8)))
   
  axiom E :
  (_C_271 : (escape_special(((23653 :> int8) :> integer)) == (101 :> int8)))
  
}

_bool escape_special(uint8 c_4, char_xP[..] dst_4, charP[..] end_5)
  requires ((_C_333 : (((_C_335 : \at((((\offset_min(\at(end_5,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(end_5,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_336 : \at((((\offset_min(\at(dst_4,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_4,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_337 : \at((((\offset_min(\at(dst_4.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst_4.char_xM,Here)) >=
                                           \at(1,Here))) &&
                                        (true && true)),Here)))) &&
             (_C_338 : (\base_block(dst_4.char_xM) == \base_block(end_5))));
behavior default:
  ensures true;
behavior is_empty:
  assumes ((((c_4 :> integer) != ((92 :> int8) :> integer)) &&
             ((c_4 :> integer) != ((7 :> int8) :> integer))) &&
            ((c_4 :> integer) != ((23653 :> int8) :> integer)));
  assigns \nothing;
  ensures (_C_302 : (((\result :> integer) != 0) == false));
behavior size_zero:
  assumes (((((c_4 :> integer) == ((92 :> int8) :> integer)) ||
              ((c_4 :> integer) == ((7 :> int8) :> integer))) ||
             ((c_4 :> integer) == ((23653 :> int8) :> integer))) &&
            ((\base_block(dst_4.char_xM) == \base_block(end_5)) &&
              ((dst_4.char_xM - end_5) >= 0)));
  assigns dst_4.char_xM;
  ensures (_C_303 : ((_C_304 : (\at(dst_4,Old).char_xM ==
                                 \at((dst_4.char_xM + 2),Old))) &&
                      (_C_305 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes (((((c_4 :> integer) == ((92 :> int8) :> integer)) ||
              ((c_4 :> integer) == ((7 :> int8) :> integer))) ||
             ((c_4 :> integer) == ((23653 :> int8) :> integer))) &&
            ((dst_4.char_xM + 1) == end_5));
  assigns dst_4.char_xM,
  dst_4.char_xM.charM;
  ensures (_C_306 : ((_C_307 : (\at(dst_4,Old).char_xM ==
                                 \at((dst_4.char_xM + 2),Old))) &&
                      ((_C_309 : ((\at(dst_4,Old).char_xM - 2).charM ==
                                   (92 :> int8))) &&
                        (_C_310 : (((\result :> integer) != 0) == true)))));
behavior size_two:
  assumes (((((c_4 :> integer) == ((92 :> int8) :> integer)) ||
              ((c_4 :> integer) == ((7 :> int8) :> integer))) ||
             ((c_4 :> integer) == ((23653 :> int8) :> integer))) &&
            ((\base_block((dst_4.char_xM + 1)) == \base_block(end_5)) &&
              (((dst_4.char_xM + 1) - end_5) < 0)));
  assigns dst_4.char_xM,
  dst_4.char_xM.charM,
  (dst_4.char_xM + 1).charM;
  ensures (_C_311 : ((_C_312 : (\at(dst_4,Old).char_xM ==
                                 \at((dst_4.char_xM + 2),Old))) &&
                      ((_C_314 : ((\at(dst_4,Old).char_xM - 2).charM ==
                                   (92 :> int8))) &&
                        ((_C_316 : ((\at(dst_4,Old).char_xM - 1).charM ==
                                     escape_special((\at(c_4,Old) :> integer)))) &&
                          (_C_317 : (((\result :> integer) != 0) == true))))));
{  
   (var charP[..] out_3);
   
   (var uint8 to_0);
   
   (var _bool __retres_3);
   
   {  (_C_273 : (out_3 = (_C_272 : dst_4.char_xM)));
      
      switch ((_C_285 : (c_4 :> int32))) {
        case (_C_274 : (92 :> int32)):
        {  (_C_276 : (to_0 = (_C_275 : ((92 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_277 : (7 :> int32)):
        {  (_C_279 : (to_0 = (_C_278 : ((97 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        case (_C_280 : (27 :> int32)):
        {  (_C_282 : (to_0 = (_C_281 : ((101 :> int32) :> uint8))));
           
           (goto switch_0_break)
        }
        default:
        {  ();
           (_C_284 : (__retres_3 = (_C_283 : ((0 :> int32) :> _bool))));
           
           (goto return_label)
        }
      };
      (switch_0_break : ());
      (if (_C_289 : ((out_3 - end_5) < 0)) then (_C_288 : ((_C_287 : out_3.charM) = 
                                                (_C_286 : ((92 :> int32) :> int8)))) else ());
      (_C_291 : (out_3 = (_C_290 : (out_3 + (1 :> int32)))));
      (if (_C_295 : ((out_3 - end_5) < 0)) then (_C_294 : ((_C_293 : out_3.charM) = 
                                                (_C_292 : (to_0 :> int8)))) else ());
      (_C_297 : (out_3 = (_C_296 : (out_3 + (1 :> int32)))));
      (_C_299 : ((_C_298 : dst_4.char_xM) = out_3));
      (_C_301 : (__retres_3 = (_C_300 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres_3))
   }
}

_bool escape_hex(uint8 c, char_xP[..] dst, charP[..] end_0)
  requires ((_C_427 : (((_C_429 : \at((((\offset_min(\at(end_0,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(end_0,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_430 : \at((((\offset_min(\at(dst,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_431 : \at((((\offset_min(\at(dst.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst.char_xM,Here)) >=
                                           \at(3,Here))) &&
                                        (true && (true && (true && true)))),Here)))) &&
             (_C_432 : (\base_block(dst.char_xM) == \base_block(end_0))));
behavior default:
  ensures true;
behavior size_zero:
  assumes ((\base_block(dst.char_xM) == \base_block(end_0)) &&
            ((dst.char_xM - end_0) >= 0));
  assigns dst.char_xM;
  ensures (_C_383 : ((_C_384 : (\at(dst,Old).char_xM ==
                                 \at((dst.char_xM + 4),Old))) &&
                      (_C_385 : (((\result :> integer) != 0) == true))));
behavior size_one:
  assumes ((dst.char_xM + 1) == end_0);
  assigns dst.char_xM,
  dst.char_xM.charM;
  ensures (_C_386 : ((_C_387 : (\at(dst,Old).char_xM ==
                                 \at((dst.char_xM + 4),Old))) &&
                      ((_C_389 : ((\at(dst,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        (_C_390 : (((\result :> integer) != 0) == true)))));
behavior size_two:
  assumes ((dst.char_xM + 2) == end_0);
  assigns dst.char_xM,
  dst.char_xM.charM,
  (dst.char_xM + 1).charM;
  ensures (_C_391 : ((_C_392 : (\at(dst,Old).char_xM ==
                                 \at((dst.char_xM + 4),Old))) &&
                      ((_C_394 : ((\at(dst,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_396 : ((\at(dst,Old).char_xM - 3).charM ==
                                     (120 :> int8))) &&
                          (_C_397 : (((\result :> integer) != 0) == true))))));
behavior size_three:
  assumes ((dst.char_xM + 3) == end_0);
  assigns dst.char_xM,
  dst.char_xM.charM,
  (dst.char_xM + 1).charM,
  (dst.char_xM + 2).charM;
  ensures (_C_398 : ((_C_399 : (\at(dst,Old).char_xM ==
                                 \at((dst.char_xM + 4),Old))) &&
                      ((_C_401 : ((\at(dst,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_403 : ((\at(dst,Old).char_xM - 3).charM ==
                                     (120 :> int8))) &&
                          ((_C_405 : ((\at(dst,Old).char_xM - 2).charM ==
                                       (hex_asc +
                                         (((\at(c,Old) :> integer) % 240) /
                                           16)).charM)) &&
                            (_C_406 : (((\result :> integer) != 0) == true)))))));
behavior size_four:
  assumes ((\base_block((dst.char_xM + 4)) == \base_block(end_0)) &&
            (((dst.char_xM + 4) - end_0) <= 0));
  assigns dst.char_xM,
  dst.char_xM.charM,
  (dst.char_xM + 1).charM,
  (dst.char_xM + 2).charM,
  (dst.char_xM + 3).charM;
  ensures (_C_407 : ((_C_408 : (\at(dst,Old).char_xM ==
                                 \at((dst.char_xM + 4),Old))) &&
                      ((_C_410 : ((\at(dst,Old).char_xM - 4).charM ==
                                   (92 :> int8))) &&
                        ((_C_412 : ((\at(dst,Old).char_xM - 3).charM ==
                                     (120 :> int8))) &&
                          ((_C_414 : ((\at(dst,Old).char_xM - 2).charM ==
                                       (hex_asc +
                                         (((\at(c,Old) :> integer) % 240) /
                                           16)).charM)) &&
                            ((_C_416 : ((\at(dst,Old).char_xM - 1).charM ==
                                         (hex_asc +
                                           ((\at(c,Old) :> integer) % 15)).charM)) &&
                              (_C_417 : (((\result :> integer) != 0) == true))))))));
{  
   (var charP[..] out_4);
   
   (var _bool __retres_4);
   
   {  (_C_340 : (out_4 = (_C_339 : dst.char_xM)));
      (if (_C_344 : ((out_4 - end_0) < 0)) then (_C_343 : ((_C_342 : out_4.charM) = 
                                                (_C_341 : ((92 :> int32) :> int8)))) else ());
      (_C_346 : (out_4 = (_C_345 : (out_4 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_347 : (jessie : (out_4 ==
                                                    (dst.char_xM + 1)))));
         ()
      };
      
      {  (if (_C_351 : ((out_4 - end_0) < 0)) then (_C_350 : ((_C_349 : out_4.charM) = 
                                                   (_C_348 : ((120 :> int32) :> int8)))) else ())
      };
      (_C_353 : (out_4 = (_C_352 : (out_4 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_354 : (jessie : (out_4 ==
                                                    (dst.char_xM + 2)))));
         ()
      };
      
      {  (if (_C_364 : ((out_4 - end_0) < 0)) then (_C_363 : ((_C_362 : out_4.charM) = 
                                                   (_C_361 : (_C_360 : 
                                                             (hex_asc +
                                                               (_C_359 : (
                                                               (_C_358 : 
                                                               ((_C_357 : (
                                                                (_C_356 : 
                                                                ((_C_355 : (c :> int32)) %
                                                                  (240 :> int32))) :> int32)) /
                                                                 (16 :> int32))) :> int32)))).charM))) else ())
      };
      (_C_366 : (out_4 = (_C_365 : (out_4 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_367 : (jessie : (out_4 ==
                                                    (dst.char_xM + 3)))));
         ()
      };
      
      {  (if (_C_375 : ((out_4 - end_0) < 0)) then (_C_374 : ((_C_373 : out_4.charM) = 
                                                   (_C_372 : (_C_371 : 
                                                             (hex_asc +
                                                               (_C_370 : (
                                                               (_C_369 : 
                                                               ((_C_368 : (c :> int32)) %
                                                                 (15 :> int32))) :> int32)))).charM))) else ())
      };
      (_C_377 : (out_4 = (_C_376 : (out_4 + (1 :> int32)))));
      
      {  
         (assert for default: (_C_378 : (jessie : (out_4 ==
                                                    (dst.char_xM + 4)))));
         ()
      };
      (_C_380 : ((_C_379 : dst.char_xM) = out_4));
      (_C_382 : (__retres_4 = (_C_381 : ((1 :> int32) :> _bool))));
      
      (return __retres_4)
   }
}
