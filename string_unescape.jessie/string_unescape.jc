
axiomatic Padding {

  logic type padding
  
}

type _bool = 0..1

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag unsigned_charP = {
  uint8 unsigned_charM: 8;
}

type unsigned_charP = [unsigned_charP]

tag char_xP = voidP with {
  charP[..] char_xM: 64;
}

type __anonenum_2 = 0..1

axiomatic HexToBin {

  logic integer hex_to_bin(integer ch)
   
  axiom A0 :
  (_C_1 : (hex_to_bin(((48 :> int8) :> integer)) == 0))
   
  axiom A1 :
  (_C_2 : (hex_to_bin(((49 :> int8) :> integer)) == 1))
   
  axiom A2 :
  (_C_3 : (hex_to_bin(((50 :> int8) :> integer)) == 2))
   
  axiom A3 :
  (_C_4 : (hex_to_bin(((51 :> int8) :> integer)) == 3))
   
  axiom A4 :
  (_C_5 : (hex_to_bin(((52 :> int8) :> integer)) == 4))
   
  axiom A5 :
  (_C_6 : (hex_to_bin(((53 :> int8) :> integer)) == 5))
   
  axiom A6 :
  (_C_7 : (hex_to_bin(((54 :> int8) :> integer)) == 6))
   
  axiom A7 :
  (_C_8 : (hex_to_bin(((55 :> int8) :> integer)) == 7))
   
  axiom A8 :
  (_C_9 : (hex_to_bin(((56 :> int8) :> integer)) == 8))
   
  axiom A9 :
  (_C_10 : (hex_to_bin(((57 :> int8) :> integer)) == 9))
   
  axiom AA :
  (_C_11 : ((_C_12 : (hex_to_bin(((97 :> int8) :> integer)) ==
                       hex_to_bin(((65 :> int8) :> integer)))) &&
             (_C_13 : (hex_to_bin(((65 :> int8) :> integer)) == 10))))
   
  axiom AB :
  (_C_14 : ((_C_15 : (hex_to_bin(((98 :> int8) :> integer)) ==
                       hex_to_bin(((66 :> int8) :> integer)))) &&
             (_C_16 : (hex_to_bin(((66 :> int8) :> integer)) == 11))))
   
  axiom AC :
  (_C_17 : ((_C_18 : (hex_to_bin(((99 :> int8) :> integer)) ==
                       hex_to_bin(((67 :> int8) :> integer)))) &&
             (_C_19 : (hex_to_bin(((67 :> int8) :> integer)) == 12))))
   
  axiom AD :
  (_C_20 : ((_C_21 : (hex_to_bin(((100 :> int8) :> integer)) ==
                       hex_to_bin(((68 :> int8) :> integer)))) &&
             (_C_22 : (hex_to_bin(((68 :> int8) :> integer)) == 13))))
   
  axiom AE :
  (_C_23 : ((_C_24 : (hex_to_bin(((101 :> int8) :> integer)) ==
                       hex_to_bin(((69 :> int8) :> integer)))) &&
             (_C_25 : (hex_to_bin(((69 :> int8) :> integer)) == 14))))
   
  axiom AF :
  (_C_26 : ((_C_27 : (hex_to_bin(((102 :> int8) :> integer)) ==
                       hex_to_bin(((70 :> int8) :> integer)))) &&
             (_C_28 : (hex_to_bin(((70 :> int8) :> integer)) == 15))))
  
}

predicate isxdigit(integer c) =
((isdigit(c) ||
   ((((97 :> int8) :> integer) <= c) && (c <= ((102 :> int8) :> integer)))) ||
  ((((65 :> int8) :> integer) <= c) && (c <= ((70 :> int8) :> integer))))

predicate isdigit(integer c_0) =
((((48 :> int8) :> integer) <= c_0) && (c_0 <= ((57 :> int8) :> integer)))

int32 hex_to_bin(int8 ch)
behavior default:
  assigns \nothing;
  ensures true;
;

predicate isodigit(integer c_1) =
((((48 :> int8) :> integer) <= c_1) && (c_1 <= ((55 :> int8) :> integer)))

int32 isodigit(int8 c)
behavior default:
  assigns \nothing;
  ensures true;
;

_bool unescape_hex(char_xP[..] src_6, char_xP[..] dst_0)
  requires ((_C_155 : ((_C_156 : \at((((\offset_min(\at(src_6,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(src_6,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here)) &&
                        (_C_157 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_6.char_xM,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)))) &&
             (_C_158 : ((_C_159 : \at((((\offset_min(\at(dst_0,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(dst_0,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_160 : \at((((\offset_min(\at(dst_0.char_xM,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_0.char_xM,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here)))));
  requires ((_C_151 : ((_C_152 : (src_6.char_xM.charM == (120 :> int8))) &&
                        (_C_153 : (! isxdigit(((src_6.char_xM + 1).charM :> integer)))))) ==>
             (_C_150 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                               \at(1,Here)) &&
                              (\offset_max(\at(src_6.char_xM,Here)) >=
                                \at(1,Here))) &&
                             true),Here)));
  requires (((_C_147 : (src_6.char_xM.charM == (120 :> int8))) &&
              ((_C_148 : isxdigit(((src_6.char_xM + 1).charM :> integer))) &&
                (_C_149 : (! isxdigit(((src_6.char_xM + 2).charM :> integer)))))) ==>
             ((_C_145 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                                \at(1,Here)) &&
                               (\offset_max(\at(src_6.char_xM,Here)) >=
                                 \at(1,Here))) &&
                              true),Here)) &&
               (_C_146 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                                 \at(2,Here)) &&
                                (\offset_max(\at(src_6.char_xM,Here)) >=
                                  \at(2,Here))) &&
                               true),Here))));
  requires (((_C_142 : (src_6.char_xM.charM == (120 :> int8))) &&
              ((_C_143 : isxdigit(((src_6.char_xM + 1).charM :> integer))) &&
                (_C_144 : isxdigit(((src_6.char_xM + 2).charM :> integer))))) ==>
             ((_C_140 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                                \at(1,Here)) &&
                               (\offset_max(\at(src_6.char_xM,Here)) >=
                                 \at(1,Here))) &&
                              true),Here)) &&
               (_C_141 : \at((((\offset_min(\at(src_6.char_xM,Here)) <=
                                 \at(2,Here)) &&
                                (\offset_max(\at(src_6.char_xM,Here)) >=
                                  \at(2,Here))) &&
                               true),Here))));
behavior default:
  ensures true;
behavior not_x:
  assumes (src_6.char_xM.charM != (120 :> int8));
  assigns src_6.char_xM;
  ensures (_C_122 : ((_C_123 : (\at(src_6,Old).char_xM ==
                                 \at((src_6.char_xM + 1),Old))) &&
                      (_C_124 : (((\result :> integer) != 0) == false))));
behavior not_hex:
  assumes ((src_6.char_xM.charM == (120 :> int8)) &&
            (! isxdigit(((src_6.char_xM + 1).charM :> integer))));
  assigns src_6.char_xM;
  ensures (_C_125 : ((_C_126 : (\at(src_6,Old).char_xM ==
                                 \at((src_6.char_xM + 2),Old))) &&
                      (_C_127 : (((\result :> integer) != 0) == false))));
behavior one_digit:
  assumes ((src_6.char_xM.charM == (120 :> int8)) &&
            (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
              (! isxdigit(((src_6.char_xM + 2).charM :> integer)))));
  assigns dst_0.char_xM.charM,
  dst_0.char_xM,
  src_6.char_xM;
  ensures (_C_128 : ((_C_129 : (\at(dst_0,Old).char_xM ==
                                 \at((dst_0.char_xM + 1),Old))) &&
                      ((_C_131 : (\at(src_6,Old).char_xM ==
                                   \at((src_6.char_xM + 2),Old))) &&
                        ((_C_133 : ((\at(dst_0.char_xM,Old).charM :> integer) ==
                                     hex_to_bin(((\at(src_6,Old).char_xM + 1).charM :> integer)))) &&
                          (_C_134 : (((\result :> integer) != 0) == true))))));
behavior two_digits:
  assumes ((src_6.char_xM.charM == (120 :> int8)) &&
            (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
              isxdigit(((src_6.char_xM + 2).charM :> integer))));
  assigns dst_0.char_xM.charM,
  dst_0.char_xM,
  src_6.char_xM;
  ensures (_C_135 : ((_C_136 : (\at(dst_0,Old).char_xM ==
                                 \at((dst_0.char_xM + 1),Old))) &&
                      ((_C_138 : (\at(src_6,Old).char_xM ==
                                   \at((src_6.char_xM + 3),Old))) &&
                        (_C_139 : (((\result :> integer) != 0) == true)))));
{  
   (check (disjoint_behaviors : (! (((src_6.char_xM.charM == (120 :> int8)) &&
                                      (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                        (! isxdigit(((src_6.char_xM + 2).charM :> integer))))) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                         isxdigit(((src_6.char_xM + 2).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! (((src_6.char_xM.charM == (120 :> int8)) &&
                                      (! isxdigit(((src_6.char_xM + 1).charM :> integer)))) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                         (! isxdigit(((src_6.char_xM + 2).charM :> integer)))))))));
   
   (check (disjoint_behaviors : (! (((src_6.char_xM.charM == (120 :> int8)) &&
                                      (! isxdigit(((src_6.char_xM + 1).charM :> integer)))) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                         isxdigit(((src_6.char_xM + 2).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! ((src_6.char_xM.charM != (120 :> int8)) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (! isxdigit(((src_6.char_xM + 1).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! ((src_6.char_xM.charM != (120 :> int8)) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                         (! isxdigit(((src_6.char_xM + 2).charM :> integer)))))))));
   
   (check (disjoint_behaviors : (! ((src_6.char_xM.charM != (120 :> int8)) &&
                                     ((src_6.char_xM.charM == (120 :> int8)) &&
                                       (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                         isxdigit(((src_6.char_xM + 2).charM :> integer))))))));
   
   (check (complete_behaviors : (((src_6.char_xM.charM == (120 :> int8)) &&
                                   (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                     isxdigit(((src_6.char_xM + 2).charM :> integer)))) ||
                                  (((src_6.char_xM.charM == (120 :> int8)) &&
                                     (isxdigit(((src_6.char_xM + 1).charM :> integer)) &&
                                       (! isxdigit(((src_6.char_xM + 2).charM :> integer))))) ||
                                    (((src_6.char_xM.charM == (120 :> int8)) &&
                                       (! isxdigit(((src_6.char_xM + 1).charM :> integer)))) ||
                                      (src_6.char_xM.charM != (120 :> int8)))))));
   
   (var charP[..] p);
   
   (var charP[..] q);
   
   (var int32 digit);
   
   (var uint8 num);
   
   (var charP[..] tmp);
   
   (var charP[..] tmp_0);
   
   (var charP[..] tmp_1);
   
   (var _bool __retres);
   
   {  (_C_30 : (p = (_C_29 : dst_0.char_xM)));
      (_C_32 : (q = (_C_31 : src_6.char_xM)));
      
      {  (_C_33 : (tmp = q));
         (_C_35 : (q = (_C_34 : (q + (1 :> int32)))));
         ()
      };
      (if (_C_40 : ((_C_39 : ((_C_38 : tmp.charM) :> int32)) !=
                     (120 :> int32))) then 
      {  (_C_37 : (__retres = (_C_36 : ((0 :> int32) :> _bool))));
         
         (goto return_label)
      } else ());
      
      {  
         (assert for default: (_C_41 : (jessie : (q == (src_6.char_xM + 1)))));
         ()
      };
      
      {  (_C_42 : (tmp_0 = q));
         (_C_44 : (q = (_C_43 : (q + (1 :> int32)))));
         ()
      };
      (_C_47 : (digit = (_C_46 : hex_to_bin((_C_45 : tmp_0.charM)))));
      
      {  
         (assert for not_hex: (_C_48 : (jessie : (digit == ((- 1) :> int32)))));
         ()
      };
      
      {  
         (assert for one_digit: (_C_49 : (jessie : (((0 :> int32) <= digit) &&
                                                     (digit <= (15 :> int32))))));
         ()
      };
      
      {  
         (assert for two_digits: (_C_50 : (jessie : (((0 :> int32) <= digit) &&
                                                      (digit <=
                                                        (15 :> int32))))));
         ()
      };
      
      {  
         (assert for default: (_C_51 : (jessie : (q == (src_6.char_xM + 2)))));
         ()
      };
      
      {  (if (_C_54 : (digit < (0 :> int32))) then 
         {  (_C_53 : (__retres = (_C_52 : ((0 :> int32) :> _bool))));
            
            (goto return_label)
         } else ())
      };
      
      {  
         (assert for default: (_C_55 : (jessie : (((0 :> int32) <= digit) &&
                                                   (digit <= (15 :> int32))))));
         ()
      };
      (_C_57 : (num = (_C_56 : (digit :> uint8))));
      
      {  
         (assert for default: (_C_58 : (jessie : (((0 :> uint8) <= num) &&
                                                   (num <= (15 :> uint8))))));
         ()
      };
      (_C_61 : (digit = (_C_60 : hex_to_bin((_C_59 : q.charM)))));
      
      {  
         (assert for one_digit: (_C_62 : (jessie : (digit ==
                                                     ((- 1) :> int32)))));
         ()
      };
      
      {  
         (assert for two_digits: (_C_63 : (jessie : (((0 :> int32) <= digit) &&
                                                      (digit <=
                                                        (15 :> int32))))));
         ()
      };
      
      {  (if (_C_76 : (digit >= (0 :> int32))) then 
         {  (_C_65 : (q = (_C_64 : (q + (1 :> int32)))));
            
            {  
               (assert for default: (_C_66 : (jessie : (q ==
                                                         (src_6.char_xM + 3)))));
               ()
            };
            
            {  
               (assert for default: (_C_67 : (jessie : (((0 :> int32) <=
                                                          digit) &&
                                                         (digit <=
                                                           (15 :> int32))))));
               ()
            };
            
            {  
               (assert for default: (_C_68 : (jessie : (((0 :> uint8) <= num) &&
                                                         (num <=
                                                           (15 :> uint8))))));
               ()
            };
            (_C_72 : (num = (_C_71 : ((_C_70 : ((_C_69 : (num :> int32)) *
                                                 (16 :> int32))) :> uint8))));
            
            {  
               (assert for default: (_C_73 : (jessie : (((0 :> uint8) <= num) &&
                                                         ((num :> integer) <=
                                                           (15 * 16))))));
               ()
            };
            (_C_75 : (num = (_C_74 : (digit :> uint8))))
         } else ())
      };
      (_C_79 : ((_C_78 : p.charM) = (_C_77 : (num :> int8))));
      
      {  
         (assert for default: (_C_80 : (jessie : (p == dst_0.char_xM))));
         ()
      };
      (_C_84 : ((_C_83 : dst_0.char_xM) = (_C_82 : ((_C_81 : dst_0.char_xM) +
                                                     (1 :> int32)))));
      
      {  
         (assert for default: (_C_85 : (jessie : (p == (dst_0.char_xM + 1)))));
         ()
      };
      
      {  
         (assert for one_digit: (_C_86 : (jessie : (q == (src_6.char_xM + 2)))));
         ()
      };
      
      {  
         (assert for two_digits: (_C_87 : (jessie : (q ==
                                                      (src_6.char_xM + 3)))));
         ()
      };
      
      {  
         {  
            {  (_C_88 : (tmp_1 = q));
               (_C_90 : (q = (_C_89 : (q + (1 :> int32)))));
               ()
            };
            (_C_93 : (digit = (_C_92 : hex_to_bin((_C_91 : tmp_1.charM)))))
         };
         (_C_95 : (num = (_C_94 : (digit :> uint8))))
      };
      (if (_C_98 : (digit < (0 :> int32))) then 
      {  (_C_97 : (__retres = (_C_96 : ((0 :> int32) :> _bool))));
         
         (goto return_label)
      } else ());
      (_C_101 : (digit = (_C_100 : hex_to_bin((_C_99 : q.charM)))));
      (if (_C_110 : (digit >= (0 :> int32))) then 
      {  (_C_103 : (q = (_C_102 : (q + (1 :> int32)))));
         (_C_109 : (num = (_C_108 : ((_C_107 : ((_C_106 : ((_C_105 : 
                                                           ((_C_104 : (num :> int32)) <<
                                                             (4 :> int32))) :> int32)) |
                                                 digit)) :> uint8))))
      } else ());
      (_C_113 : ((_C_112 : p.charM) = (_C_111 : (num :> int8))));
      (_C_117 : ((_C_116 : dst_0.char_xM) = (_C_115 : ((_C_114 : dst_0.char_xM) +
                                                        (1 :> int32)))));
      (_C_119 : ((_C_118 : src_6.char_xM) = q));
      (_C_121 : (__retres = (_C_120 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres))
   }
}

_bool unescape_octal(char_xP[..] src_7, char_xP[..] dst_1)
  requires ((_C_291 : ((_C_292 : \at((((\offset_min(\at(src_7,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(src_7,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here)) &&
                        (_C_293 : \at((((\offset_min(\at(src_7.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_7.char_xM,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)))) &&
             ((_C_294 : ((_C_295 : \at((((\offset_min(\at(dst_1,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_1,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here)) &&
                          (_C_296 : \at((((\offset_min(\at(dst_1.char_xM,Here)) <=
                                            \at(0,Here)) &&
                                           (\offset_max(\at(dst_1.char_xM,Here)) >=
                                             \at(0,Here))) &&
                                          true),Here)))) &&
               ((_C_297 : (isodigit((src_7.char_xM.charM :> integer)) ==>
                            \at((((\offset_min(\at(src_7.char_xM,Here)) <=
                                    \at(1,Here)) &&
                                   (\offset_max(\at(src_7.char_xM,Here)) >=
                                     \at(1,Here))) &&
                                  true),Here))) &&
                 ((_C_298 : (isodigit(((src_7.char_xM + 1).charM :> integer)) ==>
                              \at((((\offset_min(\at(src_7.char_xM,Here)) <=
                                      \at(2,Here)) &&
                                     (\offset_max(\at(src_7.char_xM,Here)) >=
                                       \at(2,Here))) &&
                                    true),Here))) &&
                   (_C_299 : (isodigit(((src_7.char_xM + 2).charM :> integer)) ==>
                               \at((((\offset_min(\at(src_7.char_xM,Here)) <=
                                       \at(3,Here)) &&
                                      (\offset_max(\at(src_7.char_xM,Here)) >=
                                        \at(3,Here))) &&
                                     true),Here)))))));
  requires (((_C_288 : isodigit((src_7.char_xM.charM :> integer))) &&
              (_C_289 : (! isodigit(((src_7.char_xM + 1).charM :> integer))))) ==>
             (_C_287 : \at((((\offset_min(\at(src_7.char_xM,Here)) <=
                               \at(1,Here)) &&
                              (\offset_max(\at(src_7.char_xM,Here)) >=
                                \at(1,Here))) &&
                             true),Here)));
behavior default:
  ensures true;
behavior not_octal:
  assumes (! isodigit((src_7.char_xM.charM :> integer)));
  assigns \nothing;
  ensures (_C_259 : (((\result :> integer) != 0) == false));
behavior one_digit:
  assumes (isodigit((src_7.char_xM.charM :> integer)) &&
            (! isodigit(((src_7.char_xM + 1).charM :> integer))));
  assigns dst_1.char_xM.charM,
  dst_1.char_xM,
  src_7.char_xM;
  ensures (_C_260 : ((_C_261 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 1),Old))) &&
                      ((_C_263 : (\at(src_7,Old).char_xM ==
                                   \at((src_7.char_xM + 1),Old))) &&
                        ((_C_265 : (\at(dst_1.char_xM,Old).charM ==
                                     \at(src_7,Old).char_xM.charM)) &&
                          (_C_266 : (((\result :> integer) != 0) == true))))));
behavior two_digits:
  assumes (isodigit((src_7.char_xM.charM :> integer)) &&
            (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
              (! isodigit(((src_7.char_xM + 2).charM :> integer)))));
  assigns dst_1.char_xM.charM,
  dst_1.char_xM,
  src_7.char_xM;
  ensures (_C_267 : ((_C_268 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 1),Old))) &&
                      ((_C_270 : (\at(src_7,Old).char_xM ==
                                   \at((src_7.char_xM + 2),Old))) &&
                        ((_C_272 : ((\at(dst_1.char_xM,Old).charM :> integer) ==
                                     ((\at(src_7,Old).char_xM.charM :> integer) +
                                       (8 *
                                         (\at((src_7.char_xM + 1),Old).charM :> integer))))) &&
                          (_C_273 : (((\result :> integer) != 0) == true))))));
behavior three_digits:
  assumes (isodigit((src_7.char_xM.charM :> integer)) &&
            (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
              isodigit(((src_7.char_xM + 2).charM :> integer))));
  assigns dst_1.char_xM.charM,
  dst_1.char_xM,
  src_7.char_xM;
  ensures (_C_274 : ((_C_275 : (\at(dst_1,Old).char_xM ==
                                 \at((dst_1.char_xM + 1),Old))) &&
                      ((_C_277 : (\at(src_7,Old).char_xM ==
                                   \at((src_7.char_xM + 3),Old))) &&
                        ((_C_279 : ((\at(dst_1.char_xM,Old).charM :> integer) ==
                                     (((\at(src_7,Old).char_xM.charM :> integer) +
                                        (8 *
                                          (\at((src_7.char_xM + 1),Old).charM :> integer))) +
                                       (64 *
                                         (\at((src_7.char_xM + 2),Old).charM :> integer))))) &&
                          (_C_280 : (((\result :> integer) != 0) == true))))));
{  
   (check (disjoint_behaviors : (! ((isodigit((src_7.char_xM.charM :> integer)) &&
                                      (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                        (! isodigit(((src_7.char_xM + 2).charM :> integer))))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                         isodigit(((src_7.char_xM + 2).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! ((isodigit((src_7.char_xM.charM :> integer)) &&
                                      (! isodigit(((src_7.char_xM + 1).charM :> integer)))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                         (! isodigit(((src_7.char_xM + 2).charM :> integer)))))))));
   
   (check (disjoint_behaviors : (! ((isodigit((src_7.char_xM.charM :> integer)) &&
                                      (! isodigit(((src_7.char_xM + 1).charM :> integer)))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                         isodigit(((src_7.char_xM + 2).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! ((! isodigit((src_7.char_xM.charM :> integer))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (! isodigit(((src_7.char_xM + 1).charM :> integer))))))));
   
   (check (disjoint_behaviors : (! ((! isodigit((src_7.char_xM.charM :> integer))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                         (! isodigit(((src_7.char_xM + 2).charM :> integer)))))))));
   
   (check (disjoint_behaviors : (! ((! isodigit((src_7.char_xM.charM :> integer))) &&
                                     (isodigit((src_7.char_xM.charM :> integer)) &&
                                       (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                         isodigit(((src_7.char_xM + 2).charM :> integer))))))));
   
   (check (complete_behaviors : ((isodigit((src_7.char_xM.charM :> integer)) &&
                                   (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                     isodigit(((src_7.char_xM + 2).charM :> integer)))) ||
                                  ((isodigit((src_7.char_xM.charM :> integer)) &&
                                     (isodigit(((src_7.char_xM + 1).charM :> integer)) &&
                                       (! isodigit(((src_7.char_xM + 2).charM :> integer))))) ||
                                    ((isodigit((src_7.char_xM.charM :> integer)) &&
                                       (! isodigit(((src_7.char_xM + 1).charM :> integer)))) ||
                                      (! isodigit((src_7.char_xM.charM :> integer))))))));
   
   (var charP[..] p_0);
   
   (var charP[..] q_0);
   
   (var uint8 num_0);
   
   (var int32 tmp_0_0);
   
   (var charP[..] tmp_0_1);
   
   (var charP[..] tmp_1_0);
   
   (var int32 tmp_2);
   
   (var charP[..] tmp_3);
   
   (var charP[..] tmp_4);
   
   (var int32 tmp_5);
   
   (var _bool __retres_0);
   
   {  (_C_162 : (p_0 = (_C_161 : dst_1.char_xM)));
      (_C_164 : (q_0 = (_C_163 : src_7.char_xM)));
      (_C_167 : (tmp_0_0 = (_C_166 : isodigit((_C_165 : q_0.charM)))));
      (if (_C_170 : (tmp_0_0 == (0 :> int32))) then 
      {  (_C_169 : (__retres_0 = (_C_168 : ((0 :> int32) :> _bool))));
         
         (goto return_label)
      } else ());
      
      {  (_C_171 : (tmp_0_1 = q_0));
         (_C_173 : (q_0 = (_C_172 : (q_0 + (1 :> int32)))));
         (_C_178 : (num_0 = (_C_177 : ((_C_176 : ((_C_175 : ((_C_174 : tmp_0_1.charM) :> int32)) %
                                                   (7 :> int32))) :> uint8))))
      };
      
      {  
         (assert for default: (_C_179 : (jessie : (q_0 ==
                                                    (src_7.char_xM + 1)))));
         ()
      };
      
      {  
         (assert for default: (_C_180 : (jessie : (((0 :> uint8) <= num_0) &&
                                                    (num_0 <= (6 :> uint8))))));
         ()
      };
      
      loop 
      behavior default:
        invariant (_C_183 : (((_C_185 : (\base_block(src_7.char_xM) ==
                                          \base_block(q_0))) &&
                               (_C_186 : ((src_7.char_xM - q_0) < 0))) &&
                              ((_C_188 : (\base_block(q_0) ==
                                           \base_block((src_7.char_xM + 3)))) &&
                                (_C_189 : ((q_0 - (src_7.char_xM + 3)) <= 0)))));
      behavior default:
        invariant (_C_182 : ((num_0 :> integer) < (32 * 8)));
      variant (_C_181 : (3 - (q_0 - src_7.char_xM)));
      while (true)
      {  
         {  (if (_C_199 : ((_C_198 : (num_0 :> int32)) < (32 :> int32))) then 
            {  (_C_192 : (tmp_2 = (_C_191 : isodigit((_C_190 : q_0.charM)))));
               (if (_C_197 : ((tmp_2 :> int32) != (0 :> int32))) then 
               (if (_C_196 : ((_C_195 : ((_C_194 : (q_0 -
                                                     (_C_193 : src_7.char_xM))) :> int32)) <
                               (3 :> int32))) then () else 
               (goto while_0_break)) else 
               (goto while_0_break))
            } else 
            (goto while_0_break));
            
            {  (_C_203 : (num_0 = (_C_202 : ((_C_201 : ((_C_200 : (num_0 :> int32)) *
                                                         (8 :> int32))) :> uint8))));
               
               {  (_C_204 : (tmp_1_0 = q_0));
                  (_C_206 : (q_0 = (_C_205 : (q_0 + (1 :> int32)))));
                  (_C_214 : (num_0 = (_C_213 : ((_C_212 : ((_C_211 : (num_0 :> int32)) +
                                                            (_C_210 : (
                                                            (_C_209 : 
                                                            ((_C_208 : (
                                                             (_C_207 : tmp_1_0.charM) :> int32)) %
                                                              (7 :> int32))) :> int32)))) :> uint8))))
               }
            }
         }
      };
      (while_0_break : ());
      
      {  (_C_215 : (tmp_3 = q_0));
         (_C_217 : (q_0 = (_C_216 : (q_0 + (1 :> int32)))));
         (_C_222 : (num_0 = (_C_221 : ((_C_220 : ((_C_219 : ((_C_218 : tmp_3.charM) :> int32)) &
                                                   (7 :> int32))) :> uint8))))
      };
      
      loop 
      while (true)
      {  
         {  (if (_C_232 : ((_C_231 : (num_0 :> int32)) < (32 :> int32))) then 
            {  (_C_225 : (tmp_5 = (_C_224 : isodigit((_C_223 : q_0.charM)))));
               (if (_C_230 : ((tmp_5 :> int32) != (0 :> int32))) then 
               (if (_C_229 : ((_C_228 : ((_C_227 : (q_0 -
                                                     (_C_226 : src_7.char_xM))) :> int32)) <
                               (3 :> int32))) then () else 
               (goto while_1_break)) else 
               (goto while_1_break))
            } else 
            (goto while_1_break));
            
            {  (_C_236 : (num_0 = (_C_235 : ((_C_234 : ((_C_233 : (num_0 :> int32)) <<
                                                         (3 :> int32))) :> uint8))));
               
               {  (_C_237 : (tmp_4 = q_0));
                  (_C_239 : (q_0 = (_C_238 : (q_0 + (1 :> int32)))));
                  (_C_247 : (num_0 = (_C_246 : ((_C_245 : ((_C_244 : (num_0 :> int32)) +
                                                            (_C_243 : (
                                                            (_C_242 : 
                                                            ((_C_241 : (
                                                             (_C_240 : tmp_4.charM) :> int32)) &
                                                              (7 :> int32))) :> int32)))) :> uint8))))
               }
            }
         }
      };
      (while_1_break : ());
      (_C_250 : ((_C_249 : p_0.charM) = (_C_248 : (num_0 :> int8))));
      (_C_254 : ((_C_253 : dst_1.char_xM) = (_C_252 : ((_C_251 : dst_1.char_xM) +
                                                        (1 :> int32)))));
      (_C_256 : ((_C_255 : src_7.char_xM) = q_0));
      (_C_258 : (__retres_0 = (_C_257 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres_0))
   }
}

axiomatic Un_Space {

  logic int8 unescape_space(integer ch_0)
   
  axiom N :
  (_C_300 : (unescape_space(((110 :> int8) :> integer)) == (10 :> int8)))
   
  axiom R :
  (_C_301 : (unescape_space(((114 :> int8) :> integer)) == (13 :> int8)))
   
  axiom T :
  (_C_302 : (unescape_space(((116 :> int8) :> integer)) == (9 :> int8)))
   
  axiom V :
  (_C_303 : (unescape_space(((118 :> int8) :> integer)) == (11 :> int8)))
   
  axiom F :
  (_C_304 : (unescape_space(((102 :> int8) :> integer)) == (12 :> int8)))
  
}

_bool unescape_space(char_xP[..] src_8, char_xP[..] dst_2)
  requires (_C_361 : ((((_C_364 : \at((((\offset_min(\at(src_8,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_8,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_365 : \at((((\offset_min(\at(dst_2,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_2,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_366 : \at((((\offset_min(\at(src_8.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_8.char_xM,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here))) &&
                       (_C_367 : \at((((\offset_min(\at(dst_2.char_xM,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(dst_2.char_xM,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here))));
behavior default:
  assigns dst_2.char_xM.charM,
  src_8.char_xM,
  dst_2.char_xM;
  ensures true;
behavior is_space:
  assumes (((((src_8.char_xM.charM == (110 :> int8)) ||
               (src_8.char_xM.charM == (116 :> int8))) ||
              (src_8.char_xM.charM == (114 :> int8))) ||
             (src_8.char_xM.charM == (118 :> int8))) ||
            (src_8.char_xM.charM == (102 :> int8)));
  ensures (_C_343 : ((_C_344 : ((\result :> uint32) ==
                                 ((1 :> __anonenum_2) :> uint32))) &&
                      ((_C_346 : (\at(dst_2,Old).char_xM ==
                                   \at((dst_2.char_xM + 1),Old))) &&
                        ((_C_348 : (\at(src_8,Old).char_xM ==
                                     \at((src_8.char_xM + 1),Old))) &&
                          (_C_349 : ((\at(dst_2,Old).char_xM - 1).charM ==
                                      unescape_space(((\at(src_8,Old).char_xM -
                                                        1).charM :> integer))))))));
behavior fail:
  assumes (((((src_8.char_xM.charM != (110 :> int8)) &&
               (src_8.char_xM.charM != (116 :> int8))) &&
              (src_8.char_xM.charM != (114 :> int8))) &&
             (src_8.char_xM.charM != (118 :> int8))) &&
            (src_8.char_xM.charM != (102 :> int8)));
  ensures (_C_350 : ((\result :> uint32) == ((0 :> __anonenum_2) :> uint32)));
{  
   (check (disjoint_behaviors : (! ((((((src_8.char_xM.charM ==
                                          (110 :> int8)) ||
                                         (src_8.char_xM.charM ==
                                           (116 :> int8))) ||
                                        (src_8.char_xM.charM ==
                                          (114 :> int8))) ||
                                       (src_8.char_xM.charM == (118 :> int8))) ||
                                      (src_8.char_xM.charM == (102 :> int8))) &&
                                     (((((src_8.char_xM.charM !=
                                           (110 :> int8)) &&
                                          (src_8.char_xM.charM !=
                                            (116 :> int8))) &&
                                         (src_8.char_xM.charM !=
                                           (114 :> int8))) &&
                                        (src_8.char_xM.charM !=
                                          (118 :> int8))) &&
                                       (src_8.char_xM.charM != (102 :> int8)))))));
   
   (check (complete_behaviors : ((((((src_8.char_xM.charM != (110 :> int8)) &&
                                      (src_8.char_xM.charM != (116 :> int8))) &&
                                     (src_8.char_xM.charM != (114 :> int8))) &&
                                    (src_8.char_xM.charM != (118 :> int8))) &&
                                   (src_8.char_xM.charM != (102 :> int8))) ||
                                  (((((src_8.char_xM.charM == (110 :> int8)) ||
                                       (src_8.char_xM.charM == (116 :> int8))) ||
                                      (src_8.char_xM.charM == (114 :> int8))) ||
                                     (src_8.char_xM.charM == (118 :> int8))) ||
                                    (src_8.char_xM.charM == (102 :> int8))))));
   
   (var charP[..] p_1);
   
   (var charP[..] q_1);
   
   (var _bool __retres_1);
   
   {  (_C_306 : (p_1 = (_C_305 : dst_2.char_xM)));
      (_C_308 : (q_1 = (_C_307 : src_8.char_xM)));
      
      switch ((_C_332 : ((_C_331 : q_1.charM) :> int32))) {
        case (_C_309 : (110 :> int32)):
        {  (_C_312 : ((_C_311 : p_1.charM) = (_C_310 : ((10 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_313 : (114 :> int32)):
        {  (_C_316 : ((_C_315 : p_1.charM) = (_C_314 : ((13 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_317 : (116 :> int32)):
        {  (_C_320 : ((_C_319 : p_1.charM) = (_C_318 : ((9 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_321 : (118 :> int32)):
        {  (_C_324 : ((_C_323 : p_1.charM) = (_C_322 : ((11 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_325 : (102 :> int32)):
        {  (_C_328 : ((_C_327 : p_1.charM) = (_C_326 : ((12 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        default:
        {  ();
           (_C_330 : (__retres_1 = (_C_329 : ((0 :> int32) :> _bool))));
           
           (goto return_label)
        }
      };
      (switch_0_break : ());
      (_C_336 : ((_C_335 : dst_2.char_xM) = (_C_334 : ((_C_333 : dst_2.char_xM) +
                                                        (1 :> int32)))));
      (_C_340 : ((_C_339 : src_8.char_xM) = (_C_338 : ((_C_337 : src_8.char_xM) +
                                                        (1 :> int32)))));
      (_C_342 : (__retres_1 = (_C_341 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres_1))
   }
}

axiomatic Un_Special {

  logic int8 unescape_special(int8 ch_1)
   
  axiom S :
  (_C_368 : (unescape_special((34 :> int8)) == (34 :> int8)))
   
  axiom SS :
  (_C_369 : (unescape_special((92 :> int8)) == (92 :> int8)))
   
  axiom E :
  (_C_370 : (unescape_special((101 :> int8)) == (23653 :> int8)))
   
  axiom A :
  (_C_371 : (unescape_special((97 :> int8)) == (7 :> int8)))
  
}

predicate is_special(integer c_2) =
((((c_2 == ((34 :> int8) :> integer)) || (c_2 == ((92 :> int8) :> integer))) ||
   (c_2 == ((101 :> int8) :> integer))) ||
  (c_2 == ((97 :> int8) :> integer)))

_bool unescape_special(char_xP[..] src_9, char_xP[..] dst_3)
  requires (_C_422 : ((((_C_425 : \at((((\offset_min(\at(src_9,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_9,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here)) &&
                         (_C_426 : \at((((\offset_min(\at(dst_3,Here)) <=
                                           \at(0,Here)) &&
                                          (\offset_max(\at(dst_3,Here)) >=
                                            \at(0,Here))) &&
                                         true),Here))) &&
                        (_C_427 : \at((((\offset_min(\at(src_9.char_xM,Here)) <=
                                          \at(0,Here)) &&
                                         (\offset_max(\at(src_9.char_xM,Here)) >=
                                           \at(0,Here))) &&
                                        true),Here))) &&
                       (_C_428 : \at((((\offset_min(\at(dst_3.char_xM,Here)) <=
                                         \at(0,Here)) &&
                                        (\offset_max(\at(dst_3.char_xM,Here)) >=
                                          \at(0,Here))) &&
                                       true),Here))));
behavior default:
  assigns dst_3.char_xM.charM,
  dst_3.char_xM,
  src_9.char_xM;
  ensures true;
behavior is_special:
  assumes ((((src_9.char_xM.charM == (34 :> int8)) ||
              (src_9.char_xM.charM == (92 :> int8))) ||
             (src_9.char_xM.charM == (101 :> int8))) ||
            (src_9.char_xM.charM == (97 :> int8)));
  ensures (_C_406 : ((_C_407 : ((\result :> uint32) ==
                                 ((1 :> __anonenum_2) :> uint32))) &&
                      ((_C_409 : (\at(dst_3,Old).char_xM ==
                                   \at((dst_3.char_xM + 1),Old))) &&
                        ((_C_411 : (\at(src_9,Old).char_xM ==
                                     \at((src_9.char_xM + 1),Old))) &&
                          (_C_412 : ((\at(dst_3,Old).char_xM - 1).charM ==
                                      unescape_special((\at(src_9,Old).char_xM -
                                                         1).charM)))))));
behavior fail:
  assumes ((((src_9.char_xM.charM != (34 :> int8)) &&
              (src_9.char_xM.charM != (92 :> int8))) &&
             (src_9.char_xM.charM != (101 :> int8))) &&
            (src_9.char_xM.charM != (97 :> int8)));
  ensures (_C_413 : ((\result :> uint32) == ((0 :> __anonenum_2) :> uint32)));
{  
   (check (disjoint_behaviors : (! (((((src_9.char_xM.charM == (34 :> int8)) ||
                                        (src_9.char_xM.charM == (92 :> int8))) ||
                                       (src_9.char_xM.charM == (101 :> int8))) ||
                                      (src_9.char_xM.charM == (97 :> int8))) &&
                                     ((((src_9.char_xM.charM != (34 :> int8)) &&
                                         (src_9.char_xM.charM !=
                                           (92 :> int8))) &&
                                        (src_9.char_xM.charM !=
                                          (101 :> int8))) &&
                                       (src_9.char_xM.charM != (97 :> int8)))))));
   
   (check (complete_behaviors : (((((src_9.char_xM.charM != (34 :> int8)) &&
                                     (src_9.char_xM.charM != (92 :> int8))) &&
                                    (src_9.char_xM.charM != (101 :> int8))) &&
                                   (src_9.char_xM.charM != (97 :> int8))) ||
                                  ((((src_9.char_xM.charM == (34 :> int8)) ||
                                      (src_9.char_xM.charM == (92 :> int8))) ||
                                     (src_9.char_xM.charM == (101 :> int8))) ||
                                    (src_9.char_xM.charM == (97 :> int8))))));
   
   (var charP[..] p_2);
   
   (var charP[..] q_2);
   
   (var _bool __retres_2);
   
   {  (_C_373 : (p_2 = (_C_372 : dst_3.char_xM)));
      (_C_375 : (q_2 = (_C_374 : src_9.char_xM)));
      
      switch ((_C_395 : ((_C_394 : q_2.charM) :> int32))) {
        case (_C_376 : (34 :> int32)):
        {  (_C_379 : ((_C_378 : p_2.charM) = (_C_377 : ((34 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_380 : (92 :> int32)):
        {  (_C_383 : ((_C_382 : p_2.charM) = (_C_381 : ((92 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_384 : (97 :> int32)):
        {  (_C_387 : ((_C_386 : p_2.charM) = (_C_385 : ((7 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        case (_C_388 : (101 :> int32)):
        {  (_C_391 : ((_C_390 : p_2.charM) = (_C_389 : ((27 :> int32) :> int8))));
           
           (goto switch_0_break)
        }
        default:
        {  ();
           (_C_393 : (__retres_2 = (_C_392 : ((0 :> int32) :> _bool))));
           
           (goto return_label)
        }
      };
      (switch_0_break : ());
      (_C_399 : ((_C_398 : dst_3.char_xM) = (_C_397 : ((_C_396 : dst_3.char_xM) +
                                                        (1 :> int32)))));
      (_C_403 : ((_C_402 : src_9.char_xM) = (_C_401 : ((_C_400 : src_9.char_xM) +
                                                        (1 :> int32)))));
      (_C_405 : (__retres_2 = (_C_404 : ((1 :> int32) :> _bool))));
      (return_label : 
      (return __retres_2))
   }
}

int32 string_unescape(charP[..] v_src_5, charP[..] dst, uint64 size_2,
                      uint32 flags_0)
  requires ((_C_544 : \at((if (\at(0,Here) <=
                                \at(((size_2 :> integer) - 1),Here)) then 
                          (((\offset_min(\at(v_src_5,Here)) <= \at(0,Here)) &&
                             (\offset_max(\at(v_src_5,Here)) >=
                               \at(((size_2 :> integer) - 1),Here))) &&
                            (\forall integer __framac_tmp26;
                              (((\at(0,Here) <= __framac_tmp26) &&
                                 (__framac_tmp26 <=
                                   \at(((size_2 :> integer) - 1),Here))) ==>
                                true))) else true),Here)) &&
             (_C_545 : \at((if (\at(0,Here) <=
                                 \at(((size_2 :> integer) - 1),Here)) then 
                           (((\offset_min(\at(dst,Here)) <= \at(0,Here)) &&
                              (\offset_max(\at(dst,Here)) >=
                                \at(((size_2 :> integer) - 1),Here))) &&
                             (\forall integer __framac_tmp27;
                               (((\at(0,Here) <= __framac_tmp27) &&
                                  (__framac_tmp27 <=
                                    \at(((size_2 :> integer) - 1),Here))) ==>
                                 true))) else true),Here)));
behavior default:
  ensures true;
behavior empty:
  assumes ((\forall integer i_1;
             (((0 <= i_1) && (i_1 < (size_2 :> integer))) ==>
               ((v_src_5 + i_1).charM != (12079 :> int8)))) ||
            (((((flags_0 & (0x01 :> uint32)) == (0 :> uint32)) &&
                ((flags_0 & (0x02 :> uint32)) == (0 :> uint32))) &&
               ((flags_0 & (0x04 :> uint32)) == (0 :> uint32))) &&
              ((flags_0 & (0x08 :> uint32)) == (0 :> uint32))));
  assigns (dst + [0..((size_2 :> integer) - 1)]).charM;
  ensures (_C_540 : ((_C_541 : ((\result :> integer) ==
                                 ((\at(size_2,Old) :> integer) - 1))) &&
                      (_C_542 : (\forall integer i_2;
                                  (((0 <= i_2) &&
                                     (i_2 < (\at(size_2,Old) :> integer))) ==>
                                    ((\at(dst,Old) + i_2).charM ==
                                      (\at(v_src_5,Old) + i_2).charM))))));
{  
   (var char_xP[0] src_5);
   
   (var charP[..] osrc);
   
   (var int32 osize);
   
   (var char_xP[0] out);
   
   (var _bool tmp_0_2);
   
   (var _bool tmp_0_3);
   
   (var _bool tmp_1_1);
   
   (var _bool tmp_2_0);
   
   (var charP[..] tmp_3_0);
   
   (var charP[..] tmp_4_0);
   
   (var charP[..] tmp_5_0);
   
   (var int32 __retres_3);
   
   {  (_C_430 : (src_5 = (_C_429 : (new char_xP[1]))));
      (_C_432 : ((_C_431 : src_5.char_xM) = v_src_5));
      (_C_434 : (out = (_C_433 : (new char_xP[1]))));
      (_C_436 : (osrc = (_C_435 : src_5.char_xM)));
      (_C_438 : (osize = (_C_437 : (size_2 :> int32))));
      (_C_440 : ((_C_439 : out.char_xM) = dst));
      
      loop 
      behavior default:
        invariant (_C_445 : (((_C_447 : (\base_block(osrc) ==
                                          \base_block(src_5.char_xM))) &&
                               (_C_448 : ((osrc - src_5.char_xM) <= 0))) &&
                              ((_C_450 : (\base_block(src_5.char_xM) ==
                                           \base_block((osrc +
                                                         (osize :> integer))))) &&
                                (_C_451 : ((src_5.char_xM -
                                             (osrc + (osize :> integer))) <
                                            0)))));
      behavior default:
        invariant (_C_442 : ((_C_443 : ((0 :> uint64) <= size_2)) &&
                              (_C_444 : ((size_2 :> integer) <=
                                          (osize :> integer)))));
      variant (_C_441 : size_2);
      while (true)
      {  
         {  (if (_C_458 : (((_C_457 : (_C_456 : src_5.char_xM).charM) :> int8) !=
                            (0 :> int8))) then 
            {  (_C_454 : (size_2 = (_C_453 : ((_C_452 : (size_2 -
                                                          (1 :> uint64))) :> uint64))));
               (if (_C_455 : ((size_2 :> uint64) != (0 :> uint64))) then () else 
               (goto while_0_break))
            } else 
            (goto while_0_break));
            
            {  (if (_C_514 : ((_C_513 : ((_C_512 : (_C_511 : ((_C_510 : src_5.char_xM) +
                                                               (0 :> int32))).charM) :> int32)) ==
                               (92 :> int32))) then (if (_C_509 : ((_C_508 : (
                                                                   (_C_507 : 
                                                                   (_C_506 : 
                                                                   ((_C_505 : src_5.char_xM) +
                                                                    (1 :> int32))).charM) :> int32)) !=
                                                                    (0 :> int32))) then 
                                                    (if (_C_504 : (size_2 >
                                                                    (_C_503 : ((1 :> int32) :> uint64)))) then 
                                                    {  (_C_462 : ((_C_461 : src_5.char_xM) = 
                                                       (_C_460 : ((_C_459 : src_5.char_xM) +
                                                                   (1 :> int32)))));
                                                       (_C_465 : (size_2 = 
                                                       (_C_464 : ((_C_463 : 
                                                                  (size_2 -
                                                                    (1 :> uint64))) :> uint64))));
                                                       (if (_C_472 : 
                                                           (((_C_471 : (
                                                             (_C_470 : 
                                                             (flags_0 &
                                                               (_C_469 : ((0x01 :> int32) :> uint32)))) :> uint32)) :> uint32) !=
                                                             (0 :> uint32))) then 
                                                       {  (_C_467 : (tmp_0_2 = 
                                                          (_C_466 : unescape_space(
                                                          src_5, out))));
                                                          (if (_C_468 : 
                                                              ((tmp_0_2 :> _bool) !=
                                                                (0 :> _bool))) then 
                                                          (goto __Cont) else ())
                                                       } else ());
                                                       (if (_C_479 : 
                                                           (((_C_478 : (
                                                             (_C_477 : 
                                                             (flags_0 &
                                                               (_C_476 : ((0x02 :> int32) :> uint32)))) :> uint32)) :> uint32) !=
                                                             (0 :> uint32))) then 
                                                       {  (_C_474 : (tmp_0_3 = 
                                                          (_C_473 : unescape_octal(
                                                          src_5, out))));
                                                          (if (_C_475 : 
                                                              ((tmp_0_3 :> _bool) !=
                                                                (0 :> _bool))) then 
                                                          (goto __Cont) else ())
                                                       } else ());
                                                       (if (_C_486 : 
                                                           (((_C_485 : (
                                                             (_C_484 : 
                                                             (flags_0 &
                                                               (_C_483 : ((0x04 :> int32) :> uint32)))) :> uint32)) :> uint32) !=
                                                             (0 :> uint32))) then 
                                                       {  (_C_481 : (tmp_1_1 = 
                                                          (_C_480 : unescape_hex(
                                                          src_5, out))));
                                                          (if (_C_482 : 
                                                              ((tmp_1_1 :> _bool) !=
                                                                (0 :> _bool))) then 
                                                          (goto __Cont) else ())
                                                       } else ());
                                                       (if (_C_493 : 
                                                           (((_C_492 : (
                                                             (_C_491 : 
                                                             (flags_0 &
                                                               (_C_490 : ((0x08 :> int32) :> uint32)))) :> uint32)) :> uint32) !=
                                                             (0 :> uint32))) then 
                                                       {  (_C_488 : (tmp_2_0 = 
                                                          (_C_487 : unescape_special(
                                                          src_5, out))));
                                                          (if (_C_489 : 
                                                              ((tmp_2_0 :> _bool) !=
                                                                (0 :> _bool))) then 
                                                          (goto __Cont) else ())
                                                       } else ());
                                                       
                                                       {  (_C_495 : (tmp_3_0 = 
                                                          (_C_494 : out.char_xM)));
                                                          (_C_499 : (
                                                          (_C_498 : out.char_xM) = 
                                                          (_C_497 : ((_C_496 : out.char_xM) +
                                                                    (1 :> int32)))));
                                                          (_C_502 : (
                                                          (_C_501 : tmp_3_0.charM) = 
                                                          (_C_500 : ((92 :> int32) :> int8))))
                                                       }
                                                    } else ()) else ()) else ());
               
               {  (_C_516 : (tmp_4_0 = (_C_515 : out.char_xM)));
                  (_C_520 : ((_C_519 : out.char_xM) = (_C_518 : ((_C_517 : out.char_xM) +
                                                                  (1 :> int32)))));
                  (_C_522 : (tmp_5_0 = (_C_521 : src_5.char_xM)));
                  (_C_526 : ((_C_525 : src_5.char_xM) = (_C_524 : ((_C_523 : src_5.char_xM) +
                                                                    (1 :> int32)))));
                  (_C_529 : ((_C_528 : tmp_4_0.charM) = (_C_527 : tmp_5_0.charM)))
               }
            };
            (__Cont : ())
         }
      };
      (while_0_break : ());
      (_C_533 : ((_C_532 : (_C_531 : out.char_xM).charM) = (_C_530 : ((0 :> int32) :> int8))));
      (_C_537 : (__retres_3 = (_C_536 : ((_C_535 : ((_C_534 : out.char_xM) -
                                                     dst)) :> int32))));
      (_C_538 : (free(src_5)));
      (_C_539 : (free(out)));
      
      (return __retres_3)
   }
}
