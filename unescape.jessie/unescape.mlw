
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

theory Enum__bool_aux

  use why3.Bool.Bool 
  
  function max  : int = (1)
  
  function min  : int = (0)
  
end

theory Enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool_aux 
  
  clone export enum.Enum with constant min = min, constant max = max
  
end

module Unsafe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_enum__bool

  use why3.Bool.Bool 
  
  use import Enum__bool 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

theory Enum___anonenum_2_aux

  use why3.Bool.Bool 
  
  function max  : int = (1)
  
  function min  : int = (0)
  
end

theory Enum___anonenum_2

  use why3.Bool.Bool 
  
  use import Enum___anonenum_2_aux 
  
  clone export enum.Enum with constant min = min, constant max = max
  
end

module Unsafe_enum___anonenum_2

  use why3.Bool.Bool 
  
  use import Enum___anonenum_2 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_enum___anonenum_2

  use why3.Bool.Bool 
  
  use import Enum___anonenum_2 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Jessie_voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root_unsigned_charP_safe

  use why3.Bool.Bool 
  
end

module Root_unsigned_charP_unsafe

  use why3.Bool.Bool 
  
end

module Root_char_xP_safe

  use why3.Bool.Bool 
  
end

module Root_char_xP_unsafe

  use why3.Bool.Bool 
  
end

theory Axiomatic_Un_Space

  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function unescape_space int : Int8.t
  
  axiom N #"/home/maria/ded-rep/unescape.c" 10 10 38# "expl:Axiom N" :
  (#"/home/maria/ded-rep/unescape.c" 10 10 38#
  (Int8.(=)
  (unescape_space
  (Int8.to_int (#"unescape.jc" 38 27 40# "expl:Integer cast" (Int8.of_int
  (110))))) (#"unescape.jc" 38 57 69# "expl:Integer cast" (Int8.of_int
  (10)))))
  
  axiom R #"/home/maria/ded-rep/unescape.c" 11 10 38# "expl:Axiom R" :
  (#"/home/maria/ded-rep/unescape.c" 11 10 38#
  (Int8.(=)
  (unescape_space
  (Int8.to_int (#"unescape.jc" 41 27 40# "expl:Integer cast" (Int8.of_int
  (114))))) (#"unescape.jc" 41 57 69# "expl:Integer cast" (Int8.of_int
  (13)))))
  
  axiom T #"/home/maria/ded-rep/unescape.c" 12 10 38# "expl:Axiom T" :
  (#"/home/maria/ded-rep/unescape.c" 12 10 38#
  (Int8.(=)
  (unescape_space
  (Int8.to_int (#"unescape.jc" 44 27 40# "expl:Integer cast" (Int8.of_int
  (116))))) (#"unescape.jc" 44 57 68# "expl:Integer cast" (Int8.of_int (9)))))
  
  axiom V #"/home/maria/ded-rep/unescape.c" 13 10 38# "expl:Axiom V" :
  (#"/home/maria/ded-rep/unescape.c" 13 10 38#
  (Int8.(=)
  (unescape_space
  (Int8.to_int (#"unescape.jc" 47 27 40# "expl:Integer cast" (Int8.of_int
  (118))))) (#"unescape.jc" 47 57 69# "expl:Integer cast" (Int8.of_int
  (11)))))
  
  axiom F #"/home/maria/ded-rep/unescape.c" 14 10 38# "expl:Axiom F" :
  (#"/home/maria/ded-rep/unescape.c" 14 10 38#
  (Int8.(=)
  (unescape_space
  (Int8.to_int (#"unescape.jc" 50 27 40# "expl:Integer cast" (Int8.of_int
  (102))))) (#"unescape.jc" 50 57 69# "expl:Integer cast" (Int8.of_int
  (12)))))
  
end

theory Root_char_xP

  use why3.Bool.Bool 
  
  type char_xP 
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Goto_switch_0_break_exc unit
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Safe_enum__bool_of_Safe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

module Function_unescape_space_0_safety
#"/home/maria/ded-rep/unescape.c" 41 12 50# "expl:unescape_space, safety"

  use Safe_int8_of_Safe_int32 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool_of_Safe_int32 
  
  use Safe_enum__bool 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  let unescape_space_0 #"/home/maria/ded-rep/unescape.c" 41 12 50#
  "expl:Function unescape_space, safety" =
  fun
   (src_5 : (pointer char_xP)) (dst : (pointer char_xP))
   (charP_charM_char_xM_7 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_5_2_alloc_table : (alloc_table char_xP))
   (char_xP_dst_3_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_6_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_tag_table : (tag_table voidP)) (voidP_char_xM_6_tag_table
   : (tag_table voidP)) (charP_charM_char_xM_6 : (memory voidP Int8.t)) 
   requires {
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 22#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_src_5_2_alloc_table src_5) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_src_5_2_alloc_table src_5) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 26 38#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_dst_3_alloc_table dst) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_dst_3_alloc_table dst) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 20 4 17#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=)
     (offset_min voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=)
     (offset_max voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 20 21 33#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((<=)
    (offset_min voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((>=)
    (offset_max voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p = ref (any_pointer  () : (pointer voidP)) in
     (let q = ref (any_pointer  () : (pointer voidP)) in
     (let __retres = ref (Safe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p :=
        (let _jessie_160 =
        (#"/home/maria/ded-rep/unescape.c" 43 11 15#
        "expl:Pointer dereference"
        (acc  char_xP_dst_3_alloc_table !char_xP_char_xM_dst_3 dst )) in
        begin
        (assert {
        (#"/home/maria/ded-rep/unescape.c" 43 1 5#
        "expl:Pointer index bounds" true) }); _jessie_160 end));
        begin
        (q :=
         (let _jessie_132 =
         (#"/home/maria/ded-rep/unescape.c" 43 22 26#
         "expl:Pointer dereference"
         (acc  char_xP_src_5_2_alloc_table !char_xP_char_xM_src_5_2 src_5 ))
         in
         begin
         (assert {
         (#"/home/maria/ded-rep/unescape.c" 43 1 5#
         "expl:Pointer index bounds" true) }); _jessie_132 end));
         (let _jessie_3 =
         (let _jessie_133 =
         (#"/home/maria/ded-rep/unescape.c" 45 9 11# "expl:Integer cast"
         (Safe_int32_of_Safe_int8.cast 
          (#"/home/maria/ded-rep/unescape.c" 45 9 11#
          "expl:Pointer dereference"
          (acc  voidP_char_xM_6_alloc_table charP_charM_char_xM_6 !q )) )) in
         begin (assert { ("expl:Pointer index bounds" true) }); _jessie_133
         end) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 46 8 9#
         (Safe_int32.(=)  _jessie_3
          (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
          (Safe_int32.of_int (110))) ))
         then
          begin
          (let _jessie_135 =
          (let _jessie_134 =
          (#"/home/maria/ded-rep/unescape.c" 47 10 11# "expl:Integer cast"
          (Safe_int8_of_Safe_int32.cast 
           (#"unescape.jc" 143 51 64# "expl:Integer cast"
           (Safe_int32.of_int (10))) )) in
          begin
          (assert {
          (#"/home/maria/ded-rep/unescape.c" 47 2 11#
          "expl:Pointer index bounds" true) }); _jessie_134 end) in
          (let _jessie_136 = !p in
          (let _jessie_137 = (0) in
          (let _jessie_138 = _jessie_136 in
          (#"/home/maria/ded-rep/unescape.c" 47 2 11#
          "expl:Pointer dereference"
          (upd  voidP_char_xM_7_alloc_table charP_charM_char_xM_7 _jessie_136
           _jessie_135 )))))); (raise (Goto_switch_0_break_exc ())) end
         else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Safe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Safe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Safe_int32.of_int (110))) ))))
          then
           begin
           (let _jessie_140 =
           (let _jessie_139 =
           (#"/home/maria/ded-rep/unescape.c" 50 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 148 51 64# "expl:Integer cast"
            (Safe_int32.of_int (13))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 50 2 11#
           "expl:Pointer index bounds" true) }); _jessie_139 end) in
           (let _jessie_141 = !p in
           (let _jessie_142 = (0) in
           (let _jessie_143 = _jessie_141 in
           (#"/home/maria/ded-rep/unescape.c" 50 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_7_alloc_table charP_charM_char_xM_7
            _jessie_141 _jessie_140 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Safe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Safe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Safe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Safe_int32.of_int (110))) ))))))
          then
           begin
           (let _jessie_145 =
           (let _jessie_144 =
           (#"/home/maria/ded-rep/unescape.c" 53 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 153 51 63# "expl:Integer cast"
            (Safe_int32.of_int (9))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 53 2 11#
           "expl:Pointer index bounds" true) }); _jessie_144 end) in
           (let _jessie_146 = !p in
           (let _jessie_147 = (0) in
           (let _jessie_148 = _jessie_146 in
           (#"/home/maria/ded-rep/unescape.c" 53 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_7_alloc_table charP_charM_char_xM_7
            _jessie_146 _jessie_145 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Safe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Safe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Safe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Safe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Safe_int32.of_int (110))) ))))))))
          then
           begin
           (let _jessie_150 =
           (let _jessie_149 =
           (#"/home/maria/ded-rep/unescape.c" 56 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 158 51 64# "expl:Integer cast"
            (Safe_int32.of_int (11))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 56 2 11#
           "expl:Pointer index bounds" true) }); _jessie_149 end) in
           (let _jessie_151 = !p in
           (let _jessie_152 = (0) in
           (let _jessie_153 = _jessie_151 in
           (#"/home/maria/ded-rep/unescape.c" 56 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_7_alloc_table charP_charM_char_xM_7
            _jessie_151 _jessie_150 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 58 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 58 8 9# "expl:Integer cast"
            (Safe_int32.of_int (102))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Safe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Safe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Safe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Safe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Safe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Safe_int32.of_int (110))) ))))))))))
          then
           begin
           (let _jessie_155 =
           (let _jessie_154 =
           (#"/home/maria/ded-rep/unescape.c" 59 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 163 51 64# "expl:Integer cast"
            (Safe_int32.of_int (12))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 59 2 11#
           "expl:Pointer index bounds" true) }); _jessie_154 end) in
           (let _jessie_156 = !p in
           (let _jessie_157 = (0) in
           (let _jessie_158 = _jessie_156 in
           (#"/home/maria/ded-rep/unescape.c" 59 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_7_alloc_table charP_charM_char_xM_7
            _jessie_156 _jessie_155 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres :=
             (let _jessie_159 =
             (#"/home/maria/ded-rep/unescape.c" 62 9 14# "expl:Integer cast"
             (Safe_enum__bool_of_Safe_int32.cast 
              (#"unescape.jc" 169 42 54# "expl:Integer cast"
              (Safe_int32.of_int (0))) )) in
             begin
             (assert {
             (#"/home/maria/ded-rep/unescape.c" 62 2 15#
             "expl:Pointer index bounds" true) }); _jessie_159 end));
             (raise (Return_label_exc ())) end end else ()) end);
         (raise (Goto_switch_0_break_exc ())) end end with
       Goto_switch_0_break_exc _jessie_1 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_162 =
        (let _jessie_161 =
        (shift_typesafe 
         (#"/home/maria/ded-rep/unescape.c" 64 1 5#
         "expl:Pointer dereference"
         (acc  char_xP_dst_3_alloc_table !char_xP_char_xM_dst_3 dst ))
         (Safe_int32.to_int 
          (#"unescape.jc" 176 51 63# "expl:Integer cast"
          (Safe_int32.of_int (1))) ) ) in
        begin
        (assert {
        (#"/home/maria/ded-rep/unescape.c" 64 1 10#
        "expl:Pointer index bounds" true) }); _jessie_161 end) in
        (let _jessie_163 = dst in
        (let _jessie_164 = (0) in
        (let _jessie_165 = _jessie_163 in
        (#"/home/maria/ded-rep/unescape.c" 64 1 10#
        "expl:Pointer dereference"
        (upd  char_xP_dst_3_alloc_table char_xP_char_xM_dst_3 _jessie_163
         _jessie_162 ))))));
         begin
         (let _jessie_167 =
         (let _jessie_166 =
         (shift_typesafe 
          (#"/home/maria/ded-rep/unescape.c" 65 1 5#
          "expl:Pointer dereference"
          (acc  char_xP_src_5_2_alloc_table !char_xP_char_xM_src_5_2 src_5 ))
          (Safe_int32.to_int 
           (#"unescape.jc" 178 53 65# "expl:Integer cast"
           (Safe_int32.of_int (1))) ) ) in
         begin
         (assert {
         (#"/home/maria/ded-rep/unescape.c" 65 1 10#
         "expl:Pointer index bounds" true) }); _jessie_166 end) in
         (let _jessie_168 = src_5 in
         (let _jessie_169 = (0) in
         (let _jessie_170 = _jessie_168 in
         (#"/home/maria/ded-rep/unescape.c" 65 1 10#
         "expl:Pointer dereference"
         (upd  char_xP_src_5_2_alloc_table char_xP_char_xM_src_5_2
          _jessie_168 _jessie_167 ))))));
          (__retres :=
           (let _jessie_171 =
           (#"/home/maria/ded-rep/unescape.c" 66 8 12# "expl:Integer cast"
           (Safe_enum__bool_of_Safe_int32.cast 
            (#"unescape.jc" 179 37 49# "expl:Integer cast"
            (Safe_int32.of_int (1))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 66 1 13#
           "expl:Pointer index bounds" true) }); _jessie_171 end)) end end
       end end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_2 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_172 = !__retres in
       begin
       (assert { (#"unescape.jc" 181 7 22# "expl:Pointer index bounds" true)
       }); _jessie_172 end)); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int32.to_int n)) }
  
end

theory Uint32_of_Enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint32.t
  = (Uint32.of_int (Enum__bool.to_int n))
  
end

theory Uint32_of_Enum___anonenum_2

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Uint32.t
  = (Uint32.of_int (Enum___anonenum_2.to_int n))
  
end

module Function_unescape_space_0_behaviors
#"/home/maria/ded-rep/unescape.c" 41 12 50# "expl:unescape_space, behaviors"

  use Unsafe_int8_of_Unsafe_int32 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool_of_Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Space 
  
  use why3.Bool.Bool 
  
  let unescape_space_ensures_default
  #"/home/maria/ded-rep/unescape.c" 41 12 50#
  "expl:Function unescape_space, default behavior" =
  fun
   (src_5 : (pointer char_xP)) (dst : (pointer char_xP))
   (charP_charM_char_xM_7 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_5_2_alloc_table : (alloc_table char_xP))
   (char_xP_dst_3_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_6_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_tag_table : (tag_table voidP)) (voidP_char_xM_6_tag_table
   : (tag_table voidP)) (charP_charM_char_xM_6 : (memory voidP Int8.t)) 
   requires {
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 22#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_src_5_2_alloc_table src_5) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_src_5_2_alloc_table src_5) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 26 38#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_dst_3_alloc_table dst) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_dst_3_alloc_table dst) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 20 4 17#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=)
     (offset_min voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=)
     (offset_max voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 20 21 33#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((<=)
    (offset_min voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((>=)
    (offset_max voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (((#"unescape.jc" 76 10 59# "expl:Assigns clause"
       (not_assigns voidP_char_xM_7_alloc_table voidP_char_xM_7_alloc_table
       (old !charP_charM_char_xM_7) !charP_charM_char_xM_7
       (pset_singleton (select (old !char_xP_char_xM_dst_3) dst))))
      /\
      (#"unescape.jc" 76 10 59# "expl:Assigns clause"
      (not_assigns char_xP_src_5_2_alloc_table char_xP_src_5_2_alloc_table
      (old !char_xP_char_xM_src_5_2) !char_xP_char_xM_src_5_2
      (pset_singleton src_5))))
     /\
     (#"unescape.jc" 76 10 59# "expl:Assigns clause"
     (not_assigns char_xP_dst_3_alloc_table char_xP_dst_3_alloc_table (old
     !char_xP_char_xM_dst_3) !char_xP_char_xM_dst_3 (pset_singleton dst)))))
     }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (check {
    (#"unescape.jc" 103 10 1127# "expl:Behavior disjointness check"
    (not
    (((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 104 42 55# "expl:Integer cast" (Int8.of_int (110))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 106 43 56# "expl:Integer cast" (Int8.of_int (116))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 108 42 55# "expl:Integer cast" (Int8.of_int (114))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 109 63 76# "expl:Integer cast" (Int8.of_int (118))))
     \/
     (Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 110 62 75# "expl:Integer cast" (Int8.of_int (102))))))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 112 43 56# "expl:Integer cast" (Int8.of_int (110))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 114 44 57# "expl:Integer cast" (Int8.of_int (116))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 116 43 56# "expl:Integer cast" (Int8.of_int (114))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 118 42 55# "expl:Integer cast" (Int8.of_int (118))))
    /\
    (Int8.(<>)
    (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
    (#"unescape.jc" 119 63 76# "expl:Integer cast" (Int8.of_int (102)))))))))))
    });
     (check {
     (#"unescape.jc" 121 10 797# "expl:Behavior completeness check"
     (((Int8.(<>)
       (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
       (#"unescape.jc" 121 61 74# "expl:Integer cast" (Int8.of_int (110))))
      /\
      ((Int8.(<>)
       (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
       (#"unescape.jc" 122 62 75# "expl:Integer cast" (Int8.of_int (116))))
      /\
      ((Int8.(<>)
       (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
       (#"unescape.jc" 123 61 74# "expl:Integer cast" (Int8.of_int (114))))
      /\
      ((Int8.(<>)
       (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
       (#"unescape.jc" 124 60 73# "expl:Integer cast" (Int8.of_int (118))))
      /\
      (Int8.(<>)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 125 59 72# "expl:Integer cast" (Int8.of_int (102))))))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 126 62 75# "expl:Integer cast" (Int8.of_int (110))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 127 63 76# "expl:Integer cast" (Int8.of_int (116))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 128 62 75# "expl:Integer cast" (Int8.of_int (114))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
      (#"unescape.jc" 129 61 74# "expl:Integer cast" (Int8.of_int (118))))
     \/
     (Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 130 60 73# "expl:Integer cast" (Int8.of_int (102))))))))))
     });
     (let p = ref (any_pointer  () : (pointer voidP)) in
     (let q = ref (any_pointer  () : (pointer voidP)) in
     (let __retres = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p := (acc  !char_xP_char_xM_dst_3 dst ));
        begin
        (q := (acc  !char_xP_char_xM_src_5_2 src_5 ));
         (let _jessie_3 =
         (#"/home/maria/ded-rep/unescape.c" 45 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_char_xM_6 !q )
          )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 46 8 9#
         (Unsafe_int32.(=)  _jessie_3
          (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
          (Unsafe_int32.of_int (110))) ))
         then
          begin
          (let _jessie_12 =
          (#"/home/maria/ded-rep/unescape.c" 47 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 143 51 64# "expl:Integer cast"
           (Unsafe_int32.of_int (10))) )) in
          (let _jessie_13 = !p in
          (let _jessie_14 = (0) in
          (let _jessie_15 = _jessie_13 in
          (upd  charP_charM_char_xM_7 _jessie_15 _jessie_12 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))
          then
           begin
           (let _jessie_17 =
           (#"/home/maria/ded-rep/unescape.c" 50 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 148 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (13))) )) in
           (let _jessie_18 = !p in
           (let _jessie_19 = (0) in
           (let _jessie_20 = _jessie_18 in
           (upd  charP_charM_char_xM_7 _jessie_20 _jessie_17 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))
          then
           begin
           (let _jessie_22 =
           (#"/home/maria/ded-rep/unescape.c" 53 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 153 51 63# "expl:Integer cast"
            (Unsafe_int32.of_int (9))) )) in
           (let _jessie_23 = !p in
           (let _jessie_24 = (0) in
           (let _jessie_25 = _jessie_23 in
           (upd  charP_charM_char_xM_7 _jessie_25 _jessie_22 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))
          then
           begin
           (let _jessie_27 =
           (#"/home/maria/ded-rep/unescape.c" 56 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 158 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (11))) )) in
           (let _jessie_28 = !p in
           (let _jessie_29 = (0) in
           (let _jessie_30 = _jessie_28 in
           (upd  charP_charM_char_xM_7 _jessie_30 _jessie_27 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 58 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 58 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (102))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))))
          then
           begin
           (let _jessie_32 =
           (#"/home/maria/ded-rep/unescape.c" 59 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 163 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (12))) )) in
           (let _jessie_33 = !p in
           (let _jessie_34 = (0) in
           (let _jessie_35 = _jessie_33 in
           (upd  charP_charM_char_xM_7 _jessie_35 _jessie_32 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres :=
             (#"/home/maria/ded-rep/unescape.c" 62 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 169 42 54# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_1 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_39 =
        (shift_  (acc  !char_xP_char_xM_dst_3 dst )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 176 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_40 = dst in
        (let _jessie_41 = (0) in
        (let _jessie_42 = _jessie_40 in
        (upd  char_xP_char_xM_dst_3 _jessie_42 _jessie_39 )))));
         begin
         (let _jessie_44 =
         (shift_  (acc  !char_xP_char_xM_src_5_2 src_5 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 178 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_45 = src_5 in
         (let _jessie_46 = (0) in
         (let _jessie_47 = _jessie_45 in
         (upd  char_xP_char_xM_src_5_2 _jessie_47 _jessie_44 )))));
          (__retres :=
           (#"/home/maria/ded-rep/unescape.c" 66 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 179 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let unescape_space_ensures_fail #"/home/maria/ded-rep/unescape.c" 41 12 50#
  "expl:Function unescape_space, behavior fail" =
  fun
   (src_5 : (pointer char_xP)) (dst : (pointer char_xP))
   (charP_charM_char_xM_7 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_5_2_alloc_table : (alloc_table char_xP))
   (char_xP_dst_3_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_6_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_tag_table : (tag_table voidP)) (voidP_char_xM_6_tag_table
   : (tag_table voidP)) (charP_charM_char_xM_6 : (memory voidP Int8.t)) 
   requires {
   (((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 96 38 51# "expl:Integer cast" (Int8.of_int (110))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 97 39 52# "expl:Integer cast" (Int8.of_int (116))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 98 38 51# "expl:Integer cast" (Int8.of_int (114))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 99 37 50# "expl:Integer cast" (Int8.of_int (118))))
    /\
    (Int8.(<>)
    (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
    (#"unescape.jc" 100 36 49# "expl:Integer cast" (Int8.of_int (102))))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 22#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_src_5_2_alloc_table src_5) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_src_5_2_alloc_table src_5) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 26 38#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_dst_3_alloc_table dst) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_dst_3_alloc_table dst) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 20 4 17#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=)
     (offset_min voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=)
     (offset_max voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 20 21 33#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((<=)
    (offset_min voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((>=)
    (offset_max voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/maria/ded-rep/unescape.c" 36 16 32# "expl:Ensures clause"
     (Uint32.(=) (#"unescape.jc" 101 20 39# "expl:Integer cast"
     (Uint32_of_Enum__bool.cast result)) (#"unescape.jc" 101 43 74#
     "expl:Integer cast"
     (Uint32_of_Enum___anonenum_2.cast (#"unescape.jc" 101 44 63#
     "expl:Integer cast" (Enum___anonenum_2.of_int (0)))))))) }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p = ref (any_pointer  () : (pointer voidP)) in
     (let q = ref (any_pointer  () : (pointer voidP)) in
     (let __retres = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p := (acc  !char_xP_char_xM_dst_3 dst ));
        begin
        (q := (acc  !char_xP_char_xM_src_5_2 src_5 ));
         (let _jessie_3 =
         (#"/home/maria/ded-rep/unescape.c" 45 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_char_xM_6 !q )
          )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 46 8 9#
         (Unsafe_int32.(=)  _jessie_3
          (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
          (Unsafe_int32.of_int (110))) ))
         then
          begin
          (let _jessie_94 =
          (#"/home/maria/ded-rep/unescape.c" 47 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 143 51 64# "expl:Integer cast"
           (Unsafe_int32.of_int (10))) )) in
          (let _jessie_95 = !p in
          (let _jessie_96 = (0) in
          (let _jessie_97 = _jessie_95 in
          (upd  charP_charM_char_xM_7 _jessie_97 _jessie_94 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))
          then
           begin
           (let _jessie_99 =
           (#"/home/maria/ded-rep/unescape.c" 50 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 148 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (13))) )) in
           (let _jessie_100 = !p in
           (let _jessie_101 = (0) in
           (let _jessie_102 = _jessie_100 in
           (upd  charP_charM_char_xM_7 _jessie_102 _jessie_99 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))
          then
           begin
           (let _jessie_104 =
           (#"/home/maria/ded-rep/unescape.c" 53 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 153 51 63# "expl:Integer cast"
            (Unsafe_int32.of_int (9))) )) in
           (let _jessie_105 = !p in
           (let _jessie_106 = (0) in
           (let _jessie_107 = _jessie_105 in
           (upd  charP_charM_char_xM_7 _jessie_107 _jessie_104 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))
          then
           begin
           (let _jessie_109 =
           (#"/home/maria/ded-rep/unescape.c" 56 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 158 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (11))) )) in
           (let _jessie_110 = !p in
           (let _jessie_111 = (0) in
           (let _jessie_112 = _jessie_110 in
           (upd  charP_charM_char_xM_7 _jessie_112 _jessie_109 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 58 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 58 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (102))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))))
          then
           begin
           (let _jessie_114 =
           (#"/home/maria/ded-rep/unescape.c" 59 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 163 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (12))) )) in
           (let _jessie_115 = !p in
           (let _jessie_116 = (0) in
           (let _jessie_117 = _jessie_115 in
           (upd  charP_charM_char_xM_7 _jessie_117 _jessie_114 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres :=
             (#"/home/maria/ded-rep/unescape.c" 62 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 169 42 54# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_1 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_121 =
        (shift_  (acc  !char_xP_char_xM_dst_3 dst )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 176 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_122 = dst in
        (let _jessie_123 = (0) in
        (let _jessie_124 = _jessie_122 in
        (upd  char_xP_char_xM_dst_3 _jessie_124 _jessie_121 )))));
         begin
         (let _jessie_126 =
         (shift_  (acc  !char_xP_char_xM_src_5_2 src_5 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 178 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_127 = src_5 in
         (let _jessie_128 = (0) in
         (let _jessie_129 = _jessie_127 in
         (upd  char_xP_char_xM_src_5_2 _jessie_129 _jessie_126 )))));
          (__retres :=
           (#"/home/maria/ded-rep/unescape.c" 66 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 179 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let unescape_space_ensures_is_space
  #"/home/maria/ded-rep/unescape.c" 41 12 50#
  "expl:Function unescape_space, behavior is_space" =
  fun
   (src_5 : (pointer char_xP)) (dst : (pointer char_xP))
   (charP_charM_char_xM_7 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_5_2_alloc_table : (alloc_table char_xP))
   (char_xP_dst_3_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_6_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_alloc_table : (alloc_table voidP))
   (voidP_char_xM_7_tag_table : (tag_table voidP)) (voidP_char_xM_6_tag_table
   : (tag_table voidP)) (charP_charM_char_xM_6 : (memory voidP Int8.t)) 
   requires {
   (((Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 81 38 51# "expl:Integer cast" (Int8.of_int (110))))
    \/
    ((Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 82 39 52# "expl:Integer cast" (Int8.of_int (116))))
    \/
    ((Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 83 38 51# "expl:Integer cast" (Int8.of_int (114))))
    \/
    ((Int8.(=)
     (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
     (#"unescape.jc" 84 37 50# "expl:Integer cast" (Int8.of_int (118))))
    \/
    (Int8.(=)
    (select charP_charM_char_xM_6 (select !char_xP_char_xM_src_5_2 src_5))
    (#"unescape.jc" 85 36 49# "expl:Integer cast" (Int8.of_int (102))))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 22#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_src_5_2_alloc_table src_5) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_src_5_2_alloc_table src_5) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 26 38#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=) (offset_min char_xP_dst_3_alloc_table dst) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=) (offset_max char_xP_dst_3_alloc_table dst) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 20 4 17#
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((<=)
     (offset_min voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
     ((>=)
     (offset_max voidP_char_xM_6_alloc_table
     (select !char_xP_char_xM_src_5_2 src_5)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 20 21 33#
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((<=)
    (offset_min voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 19 10 75#
   ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
    ((>=)
    (offset_max voidP_char_xM_7_alloc_table
    (select !char_xP_char_xM_dst_3 dst)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 19 10 75# ((=) true true)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/maria/ded-rep/unescape.c" 27 16 31# "expl:Ensures clause"
     (#"/home/maria/ded-rep/unescape.c" 27 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 27 16 31# "expl:Ensures clause"
      (Uint32.(=) (#"unescape.jc" 86 30 49# "expl:Integer cast"
      (Uint32_of_Enum__bool.cast result)) (#"unescape.jc" 87 31 62#
      "expl:Integer cast"
      (Uint32_of_Enum___anonenum_2.cast (#"unescape.jc" 87 32 51#
      "expl:Integer cast" (Enum___anonenum_2.of_int (1)))))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 27 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 28 16 38# "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_dst_3 dst)
      (shift (select (old !char_xP_char_xM_dst_3) dst) (1))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 27 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 29 16 38# "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_src_5_2 src_5)
      (shift (select (old !char_xP_char_xM_src_5_2) src_5) (1))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 30 16 60# "expl:Ensures clause"
     (Int8.(=)
     (select !charP_charM_char_xM_7
     (shift (select !char_xP_char_xM_dst_3 dst) (Int.(-_) (1))))
     (unescape_space
     (Int8.to_int
     (select charP_charM_char_xM_6
     (shift (select !char_xP_char_xM_src_5_2 src_5) (Int.(-_) (1))))))))))))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p = ref (any_pointer  () : (pointer voidP)) in
     (let q = ref (any_pointer  () : (pointer voidP)) in
     (let __retres = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p := (acc  !char_xP_char_xM_dst_3 dst ));
        begin
        (q := (acc  !char_xP_char_xM_src_5_2 src_5 ));
         (let _jessie_3 =
         (#"/home/maria/ded-rep/unescape.c" 45 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast  (acc  charP_charM_char_xM_6 !q )
          )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 46 8 9#
         (Unsafe_int32.(=)  _jessie_3
          (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
          (Unsafe_int32.of_int (110))) ))
         then
          begin
          (let _jessie_53 =
          (#"/home/maria/ded-rep/unescape.c" 47 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 143 51 64# "expl:Integer cast"
           (Unsafe_int32.of_int (10))) )) in
          (let _jessie_54 = !p in
          (let _jessie_55 = (0) in
          (let _jessie_56 = _jessie_54 in
          (upd  charP_charM_char_xM_7 _jessie_56 _jessie_53 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))
          then
           begin
           (let _jessie_58 =
           (#"/home/maria/ded-rep/unescape.c" 50 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 148 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (13))) )) in
           (let _jessie_59 = !p in
           (let _jessie_60 = (0) in
           (let _jessie_61 = _jessie_59 in
           (upd  charP_charM_char_xM_7 _jessie_61 _jessie_58 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))
          then
           begin
           (let _jessie_63 =
           (#"/home/maria/ded-rep/unescape.c" 53 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 153 51 63# "expl:Integer cast"
            (Unsafe_int32.of_int (9))) )) in
           (let _jessie_64 = !p in
           (let _jessie_65 = (0) in
           (let _jessie_66 = _jessie_64 in
           (upd  charP_charM_char_xM_7 _jessie_66 _jessie_63 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))
          then
           begin
           (let _jessie_68 =
           (#"/home/maria/ded-rep/unescape.c" 56 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 158 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (11))) )) in
           (let _jessie_69 = !p in
           (let _jessie_70 = (0) in
           (let _jessie_71 = _jessie_69 in
           (upd  charP_charM_char_xM_7 _jessie_71 _jessie_68 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 58 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 58 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (102))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 55 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 55 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (118))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 52 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 52 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (116))) ))
          ||
          (#"unescape.jc" 141 14 52#
          ((#"/home/maria/ded-rep/unescape.c" 49 8 9#
           (Unsafe_int32.(=)  _jessie_3
            (#"/home/maria/ded-rep/unescape.c" 49 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (114))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 46 8 9#
          (Unsafe_int32.(=)  _jessie_3
           (#"/home/maria/ded-rep/unescape.c" 46 8 9# "expl:Integer cast"
           (Unsafe_int32.of_int (110))) ))))))))))
          then
           begin
           (let _jessie_73 =
           (#"/home/maria/ded-rep/unescape.c" 59 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 163 51 64# "expl:Integer cast"
            (Unsafe_int32.of_int (12))) )) in
           (let _jessie_74 = !p in
           (let _jessie_75 = (0) in
           (let _jessie_76 = _jessie_74 in
           (upd  charP_charM_char_xM_7 _jessie_76 _jessie_73 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres :=
             (#"/home/maria/ded-rep/unescape.c" 62 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 169 42 54# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_1 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_80 =
        (shift_  (acc  !char_xP_char_xM_dst_3 dst )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 176 51 63# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_81 = dst in
        (let _jessie_82 = (0) in
        (let _jessie_83 = _jessie_81 in
        (upd  char_xP_char_xM_dst_3 _jessie_83 _jessie_80 )))));
         begin
         (let _jessie_85 =
         (shift_  (acc  !char_xP_char_xM_src_5_2 src_5 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 178 53 65# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_86 = src_5 in
         (let _jessie_87 = (0) in
         (let _jessie_88 = _jessie_86 in
         (upd  char_xP_char_xM_src_5_2 _jessie_88 _jessie_85 )))));
          (__retres :=
           (#"/home/maria/ded-rep/unescape.c" 66 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 179 37 49# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_2 ->
      'Return_label:
      'Return_label: begin (return := !__retres); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
end

theory Axiomatic_Un_Special

  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function unescape_special Int8.t : Int8.t
  
  axiom S #"/home/maria/ded-rep/unescape.c" 71 11 42# "expl:Axiom S" :
  (#"/home/maria/ded-rep/unescape.c" 71 11 42#
  (Int8.(=)
  (unescape_special (#"unescape.jc" 190 29 41# "expl:Integer cast"
  (Int8.of_int (34)))) (#"unescape.jc" 190 46 58# "expl:Integer cast"
  (Int8.of_int (34)))))
  
  axiom SS #"/home/maria/ded-rep/unescape.c" 72 11 42# "expl:Axiom SS" :
  (#"/home/maria/ded-rep/unescape.c" 72 11 42#
  (Int8.(=)
  (unescape_special (#"unescape.jc" 193 29 41# "expl:Integer cast"
  (Int8.of_int (92)))) (#"unescape.jc" 193 46 58# "expl:Integer cast"
  (Int8.of_int (92)))))
  
  axiom E #"/home/maria/ded-rep/unescape.c" 73 11 41# "expl:Axiom E" :
  (#"/home/maria/ded-rep/unescape.c" 73 11 41#
  (Int8.(=)
  (unescape_special (#"unescape.jc" 196 29 42# "expl:Integer cast"
  (Int8.of_int (101)))) (#"unescape.jc" 196 47 62# "expl:Integer cast"
  (Int8.of_int (23653)))))
  
  axiom A #"/home/maria/ded-rep/unescape.c" 74 11 41# "expl:Axiom A" :
  (#"/home/maria/ded-rep/unescape.c" 74 11 41#
  (Int8.(=)
  (unescape_special (#"unescape.jc" 199 29 41# "expl:Integer cast"
  (Int8.of_int (97)))) (#"unescape.jc" 199 46 57# "expl:Integer cast"
  (Int8.of_int (7)))))
  
end

module Function_unescape_special_0_safety
#"/home/maria/ded-rep/unescape.c" 102 12 52# "expl:unescape_special, safety"

  use Safe_int8_of_Safe_int32 
  
  use Safe_int32_of_Safe_int8 
  
  use Safe_int32 
  
  use Safe_enum__bool_of_Safe_int32 
  
  use Safe_enum__bool 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_safe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_safe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_safe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  let unescape_special_0 #"/home/maria/ded-rep/unescape.c" 102 12 52#
  "expl:Function unescape_special, safety" =
  fun
   (src_6 : (pointer char_xP)) (dst_0 : (pointer char_xP))
   (charP_charM_char_xM_11 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_6_4_alloc_table : (alloc_table char_xP))
   (char_xP_dst_0_5_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_10_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_tag_table : (tag_table voidP))
   (voidP_char_xM_10_tag_table : (tag_table voidP)) (charP_charM_char_xM_10 :
   (memory voidP Int8.t)) 
   requires {
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 22#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_src_6_4_alloc_table src_6) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_src_6_4_alloc_table src_6) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 26 38#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 83 4 17#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=)
     (offset_min voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=)
     (offset_max voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 83 21 33#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((<=)
    (offset_min voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((>=)
    (offset_max voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true))))))))))))))
   } ensures { ("expl:Postcondition" true) }  ->
   'Init:
   (let return = ref (Safe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p_0 = ref (any_pointer  () : (pointer voidP)) in
     (let q_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_0 = ref (Safe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p_0 :=
        (let _jessie_304 =
        (#"/home/maria/ded-rep/unescape.c" 104 11 15#
        "expl:Pointer dereference"
        (acc  char_xP_dst_0_5_alloc_table !char_xP_char_xM_dst_0_5 dst_0 ))
        in
        begin
        (assert {
        (#"/home/maria/ded-rep/unescape.c" 104 1 5#
        "expl:Pointer index bounds" true) }); _jessie_304 end));
        begin
        (q_0 :=
         (let _jessie_281 =
         (#"/home/maria/ded-rep/unescape.c" 104 22 26#
         "expl:Pointer dereference"
         (acc  char_xP_src_6_4_alloc_table !char_xP_char_xM_src_6_4 src_6 ))
         in
         begin
         (assert {
         (#"/home/maria/ded-rep/unescape.c" 104 1 5#
         "expl:Pointer index bounds" true) }); _jessie_281 end));
         (let _jessie_7 =
         (let _jessie_282 =
         (#"/home/maria/ded-rep/unescape.c" 106 9 11# "expl:Integer cast"
         (Safe_int32_of_Safe_int8.cast 
          (#"/home/maria/ded-rep/unescape.c" 106 9 11#
          "expl:Pointer dereference"
          (acc  voidP_char_xM_10_alloc_table charP_charM_char_xM_10 !q_0 )) ))
         in
         begin (assert { ("expl:Pointer index bounds" true) }); _jessie_282
         end) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 107 9 10#
         (Safe_int32.(=)  _jessie_7
          (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
          (Safe_int32.of_int (34))) ))
         then
          begin
          (let _jessie_284 =
          (let _jessie_283 =
          (#"/home/maria/ded-rep/unescape.c" 108 10 11# "expl:Integer cast"
          (Safe_int8_of_Safe_int32.cast 
           (#"unescape.jc" 286 53 66# "expl:Integer cast"
           (Safe_int32.of_int (34))) )) in
          begin
          (assert {
          (#"/home/maria/ded-rep/unescape.c" 108 2 11#
          "expl:Pointer index bounds" true) }); _jessie_283 end) in
          (let _jessie_285 = !p_0 in
          (let _jessie_286 = (0) in
          (let _jessie_287 = _jessie_285 in
          (#"/home/maria/ded-rep/unescape.c" 108 2 11#
          "expl:Pointer dereference"
          (upd  voidP_char_xM_11_alloc_table charP_charM_char_xM_11
           _jessie_285 _jessie_284 ))))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Safe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Safe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Safe_int32.of_int (34))) ))))
          then
           begin
           (let _jessie_289 =
           (let _jessie_288 =
           (#"/home/maria/ded-rep/unescape.c" 111 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 291 53 66# "expl:Integer cast"
            (Safe_int32.of_int (92))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 111 2 11#
           "expl:Pointer index bounds" true) }); _jessie_288 end) in
           (let _jessie_290 = !p_0 in
           (let _jessie_291 = (0) in
           (let _jessie_292 = _jessie_290 in
           (#"/home/maria/ded-rep/unescape.c" 111 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_11_alloc_table charP_charM_char_xM_11
            _jessie_290 _jessie_289 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Safe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Safe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Safe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Safe_int32.of_int (34))) ))))))
          then
           begin
           (let _jessie_294 =
           (let _jessie_293 =
           (#"/home/maria/ded-rep/unescape.c" 114 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 296 53 65# "expl:Integer cast"
            (Safe_int32.of_int (7))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 114 2 11#
           "expl:Pointer index bounds" true) }); _jessie_293 end) in
           (let _jessie_295 = !p_0 in
           (let _jessie_296 = (0) in
           (let _jessie_297 = _jessie_295 in
           (#"/home/maria/ded-rep/unescape.c" 114 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_11_alloc_table charP_charM_char_xM_11
            _jessie_295 _jessie_294 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 116 8 9#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 116 8 9# "expl:Integer cast"
            (Safe_int32.of_int (101))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Safe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Safe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Safe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Safe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Safe_int32.of_int (34))) ))))))))
          then
           begin
           (let _jessie_299 =
           (let _jessie_298 =
           (#"/home/maria/ded-rep/unescape.c" 117 10 11# "expl:Integer cast"
           (Safe_int8_of_Safe_int32.cast 
            (#"unescape.jc" 301 53 66# "expl:Integer cast"
            (Safe_int32.of_int (27))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 117 2 11#
           "expl:Pointer index bounds" true) }); _jessie_298 end) in
           (let _jessie_300 = !p_0 in
           (let _jessie_301 = (0) in
           (let _jessie_302 = _jessie_300 in
           (#"/home/maria/ded-rep/unescape.c" 117 2 11#
           "expl:Pointer dereference"
           (upd  voidP_char_xM_11_alloc_table charP_charM_char_xM_11
            _jessie_300 _jessie_299 ))))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres_0 :=
             (let _jessie_303 =
             (#"/home/maria/ded-rep/unescape.c" 120 9 14# "expl:Integer cast"
             (Safe_enum__bool_of_Safe_int32.cast 
              (#"unescape.jc" 307 44 56# "expl:Integer cast"
              (Safe_int32.of_int (0))) )) in
             begin
             (assert {
             (#"/home/maria/ded-rep/unescape.c" 120 2 15#
             "expl:Pointer index bounds" true) }); _jessie_303 end));
             (raise (Return_label_exc ())) end end else ()) end);
         (raise (Goto_switch_0_break_exc ())) end end with
       Goto_switch_0_break_exc _jessie_5 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_306 =
        (let _jessie_305 =
        (shift_typesafe 
         (#"/home/maria/ded-rep/unescape.c" 122 1 5#
         "expl:Pointer dereference"
         (acc  char_xP_dst_0_5_alloc_table !char_xP_char_xM_dst_0_5 dst_0 ))
         (Safe_int32.to_int 
          (#"unescape.jc" 314 54 66# "expl:Integer cast"
          (Safe_int32.of_int (1))) ) ) in
        begin
        (assert {
        (#"/home/maria/ded-rep/unescape.c" 122 1 10#
        "expl:Pointer index bounds" true) }); _jessie_305 end) in
        (let _jessie_307 = dst_0 in
        (let _jessie_308 = (0) in
        (let _jessie_309 = _jessie_307 in
        (#"/home/maria/ded-rep/unescape.c" 122 1 10#
        "expl:Pointer dereference"
        (upd  char_xP_dst_0_5_alloc_table char_xP_char_xM_dst_0_5 _jessie_307
         _jessie_306 ))))));
         begin
         (let _jessie_311 =
         (let _jessie_310 =
         (shift_typesafe 
          (#"/home/maria/ded-rep/unescape.c" 123 1 5#
          "expl:Pointer dereference"
          (acc  char_xP_src_6_4_alloc_table !char_xP_char_xM_src_6_4 src_6 ))
          (Safe_int32.to_int 
           (#"unescape.jc" 316 56 68# "expl:Integer cast"
           (Safe_int32.of_int (1))) ) ) in
         begin
         (assert {
         (#"/home/maria/ded-rep/unescape.c" 123 1 10#
         "expl:Pointer index bounds" true) }); _jessie_310 end) in
         (let _jessie_312 = src_6 in
         (let _jessie_313 = (0) in
         (let _jessie_314 = _jessie_312 in
         (#"/home/maria/ded-rep/unescape.c" 123 1 10#
         "expl:Pointer dereference"
         (upd  char_xP_src_6_4_alloc_table char_xP_char_xM_src_6_4
          _jessie_312 _jessie_311 ))))));
          (__retres_0 :=
           (let _jessie_315 =
           (#"/home/maria/ded-rep/unescape.c" 124 8 12# "expl:Integer cast"
           (Safe_enum__bool_of_Safe_int32.cast 
            (#"unescape.jc" 317 41 53# "expl:Integer cast"
            (Safe_int32.of_int (1))) )) in
           begin
           (assert {
           (#"/home/maria/ded-rep/unescape.c" 124 1 13#
           "expl:Pointer index bounds" true) }); _jessie_315 end)) end end
       end end; (raise (Return_label_exc ())) end with Return_label_exc
      _jessie_6 ->
      'Return_label:
      'Return_label:
      begin
      (return :=
       (let _jessie_316 = !__retres_0 in
       begin
       (assert { (#"unescape.jc" 319 7 24# "expl:Pointer index bounds" true)
       }); _jessie_316 end)); (raise Return) end end))); absurd  end with
    Return -> !return end)
  
end

module Function_unescape_special_0_behaviors
#"/home/maria/ded-rep/unescape.c" 102 12 52#
"expl:unescape_special, behaviors"

  use Unsafe_int8_of_Unsafe_int32 
  
  use Unsafe_int32_of_Unsafe_int8 
  
  use Unsafe_int32 
  
  use Unsafe_enum__bool_of_Unsafe_int32 
  
  use Unsafe_enum__bool 
  
  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_upd_unsafe 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_shift_unsafe 
  
  use import core.Jessie_return 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_any_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_acc_unsafe 
  
  use enum.Int8 
  
  use import int.Int 
  
  use import Exceptions 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Special 
  
  use why3.Bool.Bool 
  
  let unescape_special_ensures_default
  #"/home/maria/ded-rep/unescape.c" 102 12 52#
  "expl:Function unescape_special, default behavior" =
  fun
   (src_6 : (pointer char_xP)) (dst_0 : (pointer char_xP))
   (charP_charM_char_xM_11 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_6_4_alloc_table : (alloc_table char_xP))
   (char_xP_dst_0_5_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_10_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_tag_table : (tag_table voidP))
   (voidP_char_xM_10_tag_table : (tag_table voidP)) (charP_charM_char_xM_10 :
   (memory voidP Int8.t)) 
   requires {
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 22#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_src_6_4_alloc_table src_6) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_src_6_4_alloc_table src_6) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 26 38#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 83 4 17#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=)
     (offset_min voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=)
     (offset_max voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 83 21 33#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((<=)
    (offset_min voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((>=)
    (offset_max voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (((#"unescape.jc" 230 10 63# "expl:Assigns clause"
       (not_assigns voidP_char_xM_11_alloc_table voidP_char_xM_11_alloc_table
       (old !charP_charM_char_xM_11) !charP_charM_char_xM_11
       (pset_singleton (select (old !char_xP_char_xM_dst_0_5) dst_0))))
      /\
      (#"unescape.jc" 230 10 63# "expl:Assigns clause"
      (not_assigns char_xP_src_6_4_alloc_table char_xP_src_6_4_alloc_table
      (old !char_xP_char_xM_src_6_4) !char_xP_char_xM_src_6_4
      (pset_singleton src_6))))
     /\
     (#"unescape.jc" 230 10 63# "expl:Assigns clause"
     (not_assigns char_xP_dst_0_5_alloc_table char_xP_dst_0_5_alloc_table
     (old !char_xP_char_xM_dst_0_5) !char_xP_char_xM_dst_0_5
     (pset_singleton dst_0))))) }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (check {
    (#"unescape.jc" 255 10 736# "expl:Behavior disjointness check"
    (not
    (((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 255 63 75# "expl:Integer cast" (Int8.of_int (34))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 256 64 76# "expl:Integer cast" (Int8.of_int (92))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 257 63 76# "expl:Integer cast" (Int8.of_int (101))))
     \/
     (Int8.(=)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 258 62 74# "expl:Integer cast" (Int8.of_int (97)))))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 259 64 76# "expl:Integer cast" (Int8.of_int (34))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 261 43 55# "expl:Integer cast" (Int8.of_int (92))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 263 42 55# "expl:Integer cast" (Int8.of_int (101))))
    /\
    (Int8.(<>)
    (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
    (#"unescape.jc" 264 63 75# "expl:Integer cast" (Int8.of_int (97))))))))))
    });
     (check {
     (#"unescape.jc" 266 10 626# "expl:Behavior completeness check"
     (((Int8.(<>)
       (select charP_charM_char_xM_10
       (select !char_xP_char_xM_src_6_4 src_6)) (#"unescape.jc" 266 60 72#
       "expl:Integer cast" (Int8.of_int (34))))
      /\
      ((Int8.(<>)
       (select charP_charM_char_xM_10
       (select !char_xP_char_xM_src_6_4 src_6)) (#"unescape.jc" 267 61 73#
       "expl:Integer cast" (Int8.of_int (92))))
      /\
      ((Int8.(<>)
       (select charP_charM_char_xM_10
       (select !char_xP_char_xM_src_6_4 src_6)) (#"unescape.jc" 268 60 73#
       "expl:Integer cast" (Int8.of_int (101))))
      /\
      (Int8.(<>)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 269 59 71# "expl:Integer cast" (Int8.of_int (97)))))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 270 61 73# "expl:Integer cast" (Int8.of_int (34))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 271 62 74# "expl:Integer cast" (Int8.of_int (92))))
     \/
     ((Int8.(=)
      (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
      (#"unescape.jc" 272 61 74# "expl:Integer cast" (Int8.of_int (101))))
     \/
     (Int8.(=)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 273 60 72# "expl:Integer cast" (Int8.of_int (97)))))))))
     });
     (let p_0 = ref (any_pointer  () : (pointer voidP)) in
     (let q_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_0 = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p_0 := (acc  !char_xP_char_xM_dst_0_5 dst_0 ));
        begin
        (q_0 := (acc  !char_xP_char_xM_src_6_4 src_6 ));
         (let _jessie_7 =
         (#"/home/maria/ded-rep/unescape.c" 106 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast 
          (acc  charP_charM_char_xM_10 !q_0 ) )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 107 9 10#
         (Unsafe_int32.(=)  _jessie_7
          (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
          (Unsafe_int32.of_int (34))) ))
         then
          begin
          (let _jessie_176 =
          (#"/home/maria/ded-rep/unescape.c" 108 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 286 53 66# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) )) in
          (let _jessie_177 = !p_0 in
          (let _jessie_178 = (0) in
          (let _jessie_179 = _jessie_177 in
          (upd  charP_charM_char_xM_11 _jessie_179 _jessie_176 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))
          then
           begin
           (let _jessie_181 =
           (#"/home/maria/ded-rep/unescape.c" 111 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 291 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) )) in
           (let _jessie_182 = !p_0 in
           (let _jessie_183 = (0) in
           (let _jessie_184 = _jessie_182 in
           (upd  charP_charM_char_xM_11 _jessie_184 _jessie_181 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))
          then
           begin
           (let _jessie_186 =
           (#"/home/maria/ded-rep/unescape.c" 114 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 296 53 65# "expl:Integer cast"
            (Unsafe_int32.of_int (7))) )) in
           (let _jessie_187 = !p_0 in
           (let _jessie_188 = (0) in
           (let _jessie_189 = _jessie_187 in
           (upd  charP_charM_char_xM_11 _jessie_189 _jessie_186 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 116 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 116 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (101))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))))
          then
           begin
           (let _jessie_191 =
           (#"/home/maria/ded-rep/unescape.c" 117 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 301 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (27))) )) in
           (let _jessie_192 = !p_0 in
           (let _jessie_193 = (0) in
           (let _jessie_194 = _jessie_192 in
           (upd  charP_charM_char_xM_11 _jessie_194 _jessie_191 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres_0 :=
             (#"/home/maria/ded-rep/unescape.c" 120 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 307 44 56# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_5 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_198 =
        (shift_  (acc  !char_xP_char_xM_dst_0_5 dst_0 )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 314 54 66# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_199 = dst_0 in
        (let _jessie_200 = (0) in
        (let _jessie_201 = _jessie_199 in
        (upd  char_xP_char_xM_dst_0_5 _jessie_201 _jessie_198 )))));
         begin
         (let _jessie_203 =
         (shift_  (acc  !char_xP_char_xM_src_6_4 src_6 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 316 56 68# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_204 = src_6 in
         (let _jessie_205 = (0) in
         (let _jessie_206 = _jessie_204 in
         (upd  char_xP_char_xM_src_6_4 _jessie_206 _jessie_203 )))));
          (__retres_0 :=
           (#"/home/maria/ded-rep/unescape.c" 124 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 317 41 53# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let unescape_special_ensures_fail
  #"/home/maria/ded-rep/unescape.c" 102 12 52#
  "expl:Function unescape_special, behavior fail" =
  fun
   (src_6 : (pointer char_xP)) (dst_0 : (pointer char_xP))
   (charP_charM_char_xM_11 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_6_4_alloc_table : (alloc_table char_xP))
   (char_xP_dst_0_5_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_10_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_tag_table : (tag_table voidP))
   (voidP_char_xM_10_tag_table : (tag_table voidP)) (charP_charM_char_xM_10 :
   (memory voidP Int8.t)) 
   requires {
   (((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 249 37 49# "expl:Integer cast" (Int8.of_int (34))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 250 38 50# "expl:Integer cast" (Int8.of_int (92))))
    /\
    ((Int8.(<>)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 251 37 50# "expl:Integer cast" (Int8.of_int (101))))
    /\
    (Int8.(<>)
    (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
    (#"unescape.jc" 252 36 48# "expl:Integer cast" (Int8.of_int (97)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 22#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_src_6_4_alloc_table src_6) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_src_6_4_alloc_table src_6) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 26 38#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 83 4 17#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=)
     (offset_min voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=)
     (offset_max voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 83 21 33#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((<=)
    (offset_min voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((>=)
    (offset_max voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/maria/ded-rep/unescape.c" 97 17 33# "expl:Ensures clause"
     (Uint32.(=) (#"unescape.jc" 253 21 40# "expl:Integer cast"
     (Uint32_of_Enum__bool.cast result)) (#"unescape.jc" 253 44 75#
     "expl:Integer cast"
     (Uint32_of_Enum___anonenum_2.cast (#"unescape.jc" 253 45 64#
     "expl:Integer cast" (Enum___anonenum_2.of_int (0)))))))) }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p_0 = ref (any_pointer  () : (pointer voidP)) in
     (let q_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_0 = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p_0 := (acc  !char_xP_char_xM_dst_0_5 dst_0 ));
        begin
        (q_0 := (acc  !char_xP_char_xM_src_6_4 src_6 ));
         (let _jessie_7 =
         (#"/home/maria/ded-rep/unescape.c" 106 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast 
          (acc  charP_charM_char_xM_10 !q_0 ) )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 107 9 10#
         (Unsafe_int32.(=)  _jessie_7
          (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
          (Unsafe_int32.of_int (34))) ))
         then
          begin
          (let _jessie_248 =
          (#"/home/maria/ded-rep/unescape.c" 108 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 286 53 66# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) )) in
          (let _jessie_249 = !p_0 in
          (let _jessie_250 = (0) in
          (let _jessie_251 = _jessie_249 in
          (upd  charP_charM_char_xM_11 _jessie_251 _jessie_248 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))
          then
           begin
           (let _jessie_253 =
           (#"/home/maria/ded-rep/unescape.c" 111 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 291 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) )) in
           (let _jessie_254 = !p_0 in
           (let _jessie_255 = (0) in
           (let _jessie_256 = _jessie_254 in
           (upd  charP_charM_char_xM_11 _jessie_256 _jessie_253 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))
          then
           begin
           (let _jessie_258 =
           (#"/home/maria/ded-rep/unescape.c" 114 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 296 53 65# "expl:Integer cast"
            (Unsafe_int32.of_int (7))) )) in
           (let _jessie_259 = !p_0 in
           (let _jessie_260 = (0) in
           (let _jessie_261 = _jessie_259 in
           (upd  charP_charM_char_xM_11 _jessie_261 _jessie_258 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 116 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 116 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (101))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))))
          then
           begin
           (let _jessie_263 =
           (#"/home/maria/ded-rep/unescape.c" 117 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 301 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (27))) )) in
           (let _jessie_264 = !p_0 in
           (let _jessie_265 = (0) in
           (let _jessie_266 = _jessie_264 in
           (upd  charP_charM_char_xM_11 _jessie_266 _jessie_263 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres_0 :=
             (#"/home/maria/ded-rep/unescape.c" 120 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 307 44 56# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_5 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_270 =
        (shift_  (acc  !char_xP_char_xM_dst_0_5 dst_0 )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 314 54 66# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_271 = dst_0 in
        (let _jessie_272 = (0) in
        (let _jessie_273 = _jessie_271 in
        (upd  char_xP_char_xM_dst_0_5 _jessie_273 _jessie_270 )))));
         begin
         (let _jessie_275 =
         (shift_  (acc  !char_xP_char_xM_src_6_4 src_6 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 316 56 68# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_276 = src_6 in
         (let _jessie_277 = (0) in
         (let _jessie_278 = _jessie_276 in
         (upd  char_xP_char_xM_src_6_4 _jessie_278 _jessie_275 )))));
          (__retres_0 :=
           (#"/home/maria/ded-rep/unescape.c" 124 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 317 41 53# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
  let unescape_special_ensures_is_special
  #"/home/maria/ded-rep/unescape.c" 102 12 52#
  "expl:Function unescape_special, behavior is_special" =
  fun
   (src_6 : (pointer char_xP)) (dst_0 : (pointer char_xP))
   (charP_charM_char_xM_11 : ref (memory voidP Int8.t))
   (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP)))
   (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP)))
   (char_xP_src_6_4_alloc_table : (alloc_table char_xP))
   (char_xP_dst_0_5_alloc_table : (alloc_table char_xP))
   (voidP_char_xM_10_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_alloc_table : (alloc_table voidP))
   (voidP_char_xM_11_tag_table : (tag_table voidP))
   (voidP_char_xM_10_tag_table : (tag_table voidP)) (charP_charM_char_xM_10 :
   (memory voidP Int8.t)) 
   requires {
   (((Int8.(=)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 235 37 49# "expl:Integer cast" (Int8.of_int (34))))
    \/
    ((Int8.(=)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 236 38 50# "expl:Integer cast" (Int8.of_int (92))))
    \/
    ((Int8.(=)
     (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
     (#"unescape.jc" 237 37 50# "expl:Integer cast" (Int8.of_int (101))))
    \/
    (Int8.(=)
    (select charP_charM_char_xM_10 (select !char_xP_char_xM_src_6_4 src_6))
    (#"unescape.jc" 238 36 48# "expl:Integer cast" (Int8.of_int (97)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 22#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_src_6_4_alloc_table src_6) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_src_6_4_alloc_table src_6) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 26 38#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=) (offset_min char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=) (offset_max char_xP_dst_0_5_alloc_table dst_0) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 83 4 17#
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((<=)
     (offset_min voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\
    (#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
     ((>=)
     (offset_max voidP_char_xM_10_alloc_table
     (select !char_xP_char_xM_src_6_4 src_6)) (0)))
    /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))
   /\
   (#"/home/maria/ded-rep/unescape.c" 83 21 33#
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((<=)
    (offset_min voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\
   (#"/home/maria/ded-rep/unescape.c" 82 10 85#
   ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
    ((>=)
    (offset_max voidP_char_xM_11_alloc_table
    (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
   /\ (#"/home/maria/ded-rep/unescape.c" 82 10 85# ((=) true true)))))))))))))))
   }
   ensures {
     ("expl:Postcondition"
     (#"/home/maria/ded-rep/unescape.c" 89 16 31# "expl:Ensures clause"
     (#"/home/maria/ded-rep/unescape.c" 89 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 89 16 31# "expl:Ensures clause"
      (Uint32.(=) (#"unescape.jc" 239 32 51# "expl:Integer cast"
      (Uint32_of_Enum__bool.cast result)) (#"unescape.jc" 240 33 64#
      "expl:Integer cast"
      (Uint32_of_Enum___anonenum_2.cast (#"unescape.jc" 240 34 53#
      "expl:Integer cast" (Enum___anonenum_2.of_int (1)))))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 89 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 90 16 38# "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_dst_0_5 dst_0)
      (shift (select (old !char_xP_char_xM_dst_0_5) dst_0) (1))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 89 16 31# "expl:Ensures clause"
     ((#"/home/maria/ded-rep/unescape.c" 91 16 38# "expl:Ensures clause"
      ((=) (select !char_xP_char_xM_src_6_4 src_6)
      (shift (select (old !char_xP_char_xM_src_6_4) src_6) (1))))
     /\
     (#"/home/maria/ded-rep/unescape.c" 92 16 62# "expl:Ensures clause"
     (Int8.(=)
     (select !charP_charM_char_xM_11
     (shift (select !char_xP_char_xM_dst_0_5 dst_0) (Int.(-_) (1))))
     (unescape_special
     (select charP_charM_char_xM_10
     (shift (select !char_xP_char_xM_src_6_4 src_6) (Int.(-_) (1)))))))))))))))
     }  ->
   'Init:
   (let return = ref (Unsafe_enum__bool.any_  () ) in
   try
    begin
    (); ();
     (let p_0 = ref (any_pointer  () : (pointer voidP)) in
     (let q_0 = ref (any_pointer  () : (pointer voidP)) in
     (let __retres_0 = ref (Unsafe_enum__bool.any_  () ) in
     try
      begin
      try
       begin
       (p_0 := (acc  !char_xP_char_xM_dst_0_5 dst_0 ));
        begin
        (q_0 := (acc  !char_xP_char_xM_src_6_4 src_6 ));
         (let _jessie_7 =
         (#"/home/maria/ded-rep/unescape.c" 106 9 11# "expl:Integer cast"
         (Unsafe_int32_of_Unsafe_int8.cast 
          (acc  charP_charM_char_xM_10 !q_0 ) )) in
         begin
         (if
         (#"/home/maria/ded-rep/unescape.c" 107 9 10#
         (Unsafe_int32.(=)  _jessie_7
          (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
          (Unsafe_int32.of_int (34))) ))
         then
          begin
          (let _jessie_212 =
          (#"/home/maria/ded-rep/unescape.c" 108 10 11# "expl:Integer cast"
          (Unsafe_int8_of_Unsafe_int32.cast 
           (#"unescape.jc" 286 53 66# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) )) in
          (let _jessie_213 = !p_0 in
          (let _jessie_214 = (0) in
          (let _jessie_215 = _jessie_213 in
          (upd  charP_charM_char_xM_11 _jessie_215 _jessie_212 )))));
           (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))
          then
           begin
           (let _jessie_217 =
           (#"/home/maria/ded-rep/unescape.c" 111 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 291 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) )) in
           (let _jessie_218 = !p_0 in
           (let _jessie_219 = (0) in
           (let _jessie_220 = _jessie_218 in
           (upd  charP_charM_char_xM_11 _jessie_220 _jessie_217 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))
          then
           begin
           (let _jessie_222 =
           (#"/home/maria/ded-rep/unescape.c" 114 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 296 53 65# "expl:Integer cast"
            (Unsafe_int32.of_int (7))) )) in
           (let _jessie_223 = !p_0 in
           (let _jessie_224 = (0) in
           (let _jessie_225 = _jessie_223 in
           (upd  charP_charM_char_xM_11 _jessie_225 _jessie_222 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 116 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 116 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (101))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 113 8 9#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 113 8 9# "expl:Integer cast"
            (Unsafe_int32.of_int (97))) ))
          ||
          (#"unescape.jc" 284 14 54#
          ((#"/home/maria/ded-rep/unescape.c" 110 9 10#
           (Unsafe_int32.(=)  _jessie_7
            (#"/home/maria/ded-rep/unescape.c" 110 9 10# "expl:Integer cast"
            (Unsafe_int32.of_int (92))) ))
          ||
          (#"/home/maria/ded-rep/unescape.c" 107 9 10#
          (Unsafe_int32.(=)  _jessie_7
           (#"/home/maria/ded-rep/unescape.c" 107 9 10# "expl:Integer cast"
           (Unsafe_int32.of_int (34))) ))))))))
          then
           begin
           (let _jessie_227 =
           (#"/home/maria/ded-rep/unescape.c" 117 10 11# "expl:Integer cast"
           (Unsafe_int8_of_Unsafe_int32.cast 
            (#"unescape.jc" 301 53 66# "expl:Integer cast"
            (Unsafe_int32.of_int (27))) )) in
           (let _jessie_228 = !p_0 in
           (let _jessie_229 = (0) in
           (let _jessie_230 = _jessie_228 in
           (upd  charP_charM_char_xM_11 _jessie_230 _jessie_227 )))));
            (raise (Goto_switch_0_break_exc ())) end else ());
          (if (true)
          then
           begin
           ();
            begin
            (__retres_0 :=
             (#"/home/maria/ded-rep/unescape.c" 120 9 14# "expl:Integer cast"
             (Unsafe_enum__bool_of_Unsafe_int32.cast 
              (#"unescape.jc" 307 44 56# "expl:Integer cast"
              (Unsafe_int32.of_int (0))) ))); (raise (Return_label_exc ()))
            end end else ()) end); (raise (Goto_switch_0_break_exc ())) end
       end with Goto_switch_0_break_exc _jessie_5 ->
       'Switch_0_break:
       'Switch_0_break:
       begin
       ();
        begin
        (let _jessie_234 =
        (shift_  (acc  !char_xP_char_xM_dst_0_5 dst_0 )
         (Unsafe_int32.to_int 
          (#"unescape.jc" 314 54 66# "expl:Integer cast"
          (Unsafe_int32.of_int (1))) ) ) in
        (let _jessie_235 = dst_0 in
        (let _jessie_236 = (0) in
        (let _jessie_237 = _jessie_235 in
        (upd  char_xP_char_xM_dst_0_5 _jessie_237 _jessie_234 )))));
         begin
         (let _jessie_239 =
         (shift_  (acc  !char_xP_char_xM_src_6_4 src_6 )
          (Unsafe_int32.to_int 
           (#"unescape.jc" 316 56 68# "expl:Integer cast"
           (Unsafe_int32.of_int (1))) ) ) in
         (let _jessie_240 = src_6 in
         (let _jessie_241 = (0) in
         (let _jessie_242 = _jessie_240 in
         (upd  char_xP_char_xM_src_6_4 _jessie_242 _jessie_239 )))));
          (__retres_0 :=
           (#"/home/maria/ded-rep/unescape.c" 124 8 12# "expl:Integer cast"
           (Unsafe_enum__bool_of_Unsafe_int32.cast 
            (#"unescape.jc" 317 41 53# "expl:Integer cast"
            (Unsafe_int32.of_int (1))) ))) end end end end;
       (raise (Return_label_exc ())) end with Return_label_exc _jessie_6 ->
      'Return_label:
      'Return_label: begin (return := !__retres_0); (raise Return) end end)));
     absurd  end with Return -> !return end)
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Struct_voidP

  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP)) = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct_charP

  use import Struct_voidP 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  use import core.Jessie_charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (voidP_tag_table :
  (tag_table voidP)) = (fresh_tag_struct_voidP p voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (voidP_alloc_table
  : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_charP p !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

theory Struct_char_xP

  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function char_xP_tag  : (tag_id char_xP)
  
  axiom Char_xP_parenttag_bottom :
  (parenttag char_xP_tag bottom_tag)
  
  axiom Char_xP_is_final :
  (forall char_xP_tag_table : (tag_table char_xP).
   (forall p : (pointer char_xP).
    ((instanceof char_xP_tag_table p char_xP_tag) ->
     ((=) (typeof char_xP_tag_table p) char_xP_tag))))
  
  predicate frame_tag_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_tag_table : (tag_table char_xP)) (char_xP_tag_table :
  (tag_table char_xP))
  =
     ((tag_extends old_char_xP_tag_table char_xP_tag_table) /\
     (alloc_tag_block old_char_xP_tag_table char_xP_tag_table p))
  
  predicate frame_free_struct_char_xP (p : (pointer char_xP))
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((free_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (free_block old_char_xP_alloc_table char_xP_alloc_table p))
  
  predicate frame_alloc_struct_char_xP (p : (pointer char_xP)) (n : int)
  (old_char_xP_alloc_table : (alloc_table char_xP)) (char_xP_alloc_table :
  (alloc_table char_xP))
  =
     ((alloc_extends old_char_xP_alloc_table char_xP_alloc_table) /\
     (alloc_block old_char_xP_alloc_table char_xP_alloc_table p n))
  
  predicate fresh_tag_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (tag_fresh char_xP_tag_table p)
  
  predicate fresh_alloc_struct_char_xP (p : (pointer char_xP))
  (char_xP_alloc_table : (alloc_table char_xP))
  = (alloc_fresh char_xP_alloc_table p)
  
  predicate container_of_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate container_of_struct_char_xP (p : (pointer char_xP)) (l : int) (r
  : int) (char_xP_tag_table : (tag_table char_xP)) = true
  
  predicate typeof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = ((=) (typeof char_xP_tag_table p) char_xP_tag)
  
  predicate typeof_struct_char_xP (p : (pointer char_xP)) (l : int) (r : int)
  (char_xP_tag_table : (tag_table char_xP))
  =
     (((=) (typeof char_xP_tag_table p) char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof char_xP_tag_table (shift p i)) char_xP_tag))))
  
  predicate instanceof_singleton_struct_char_xP (p : (pointer char_xP))
  (char_xP_tag_table : (tag_table char_xP))
  = (instanceof char_xP_tag_table p char_xP_tag)
  
  predicate instanceof_struct_char_xP (p : (pointer char_xP)) (l : int) (r :
  int) (char_xP_tag_table : (tag_table char_xP))
  =
     ((instanceof char_xP_tag_table p char_xP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof char_xP_tag_table (shift p i) char_xP_tag))))
  
  predicate right_valid_struct_char_xP (p : (pointer char_xP)) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((>=) (offset_max char_xP_alloc_table p) b)
  
  predicate left_valid_struct_char_xP (p : (pointer char_xP)) (a : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  = ((<=) (offset_min char_xP_alloc_table p) a)
  
  predicate valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b : int)
  (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((<=) (offset_min char_xP_alloc_table p) a) /\
     ((>=) (offset_max char_xP_alloc_table p) b))
  
  predicate strict_valid_struct_char_xP (p : (pointer char_xP)) (a : int) (b
  : int) (char_xP_alloc_table : (alloc_table char_xP))
  =
     (((=) (offset_min char_xP_alloc_table p) a) /\
     ((=) (offset_max char_xP_alloc_table p) b))
  
  axiom Char_xP_int : ((=) (int_of_tag char_xP_tag) (4))
  
end

module Struct_char_xP_unsafe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !char_xP_alloc_table p)) }
    writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP_requires
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { ((>=) n (0)) } writes { char_xP_alloc_table,
     char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
end

module Struct_char_xP_safe

  use import Struct_char_xP 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_char_xP
  (p : (pointer char_xP)) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) : unit
    requires { true } writes { char_xP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !char_xP_alloc_table (old !char_xP_alloc_table)))
      \/
      ((frame_free_struct_char_xP p (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\ (fresh_alloc_struct_char_xP p !char_xP_alloc_table))) }
  
  val allocate_struct_char_xP
  (n : int) 
   (char_xP_alloc_table : ref (alloc_table char_xP)) 
    (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
     requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
     ensures {
       ((strict_valid_struct_char_xP result (0) (Int.(-) n (1))
        !char_xP_alloc_table)
       /\
       ((frame_alloc_struct_char_xP result n (old !char_xP_alloc_table)
        !char_xP_alloc_table)
       /\
       ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
        !char_xP_tag_table)
       /\
       ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
       ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
       ((typeof_struct_char_xP result (0) n !char_xP_tag_table) /\
       (container_of_struct_char_xP result (0) n !char_xP_tag_table))))))) }
  
  val allocate_singleton_struct_char_xP
  (char_xP_alloc_table : ref (alloc_table char_xP)) 
   (char_xP_tag_table : ref (tag_table char_xP)) : (pointer char_xP)
    requires { true } writes { char_xP_alloc_table, char_xP_tag_table }
    ensures {
      ((strict_valid_struct_char_xP result (0) (0) !char_xP_alloc_table) /\
      ((frame_alloc_struct_char_xP result (1) (old !char_xP_alloc_table)
       !char_xP_alloc_table)
      /\
      ((frame_tag_struct_char_xP result (old !char_xP_tag_table)
       !char_xP_tag_table)
      /\
      ((fresh_alloc_struct_char_xP result (old !char_xP_alloc_table)) /\
      ((fresh_tag_struct_char_xP result (old !char_xP_tag_table)) /\
      ((typeof_singleton_struct_char_xP result !char_xP_tag_table) /\
      (container_of_singleton_struct_char_xP result !char_xP_tag_table)))))))
      }
  
end

theory Root_unsigned_charP

  use why3.Bool.Bool 
  
  type unsigned_charP 
  
end

theory Struct_unsigned_charP

  use import Root_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_tag_table 
  
  use import core.Jessie_tag_id 
  
  use import core.Jessie_tag 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import core.Jessie_alloc 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  function unsigned_charP_tag  : (tag_id
  unsigned_charP)
  
  axiom Unsigned_charP_parenttag_bottom :
  (parenttag unsigned_charP_tag bottom_tag)
  
  axiom Unsigned_charP_is_final :
  (forall unsigned_charP_tag_table : (tag_table unsigned_charP).
   (forall p : (pointer unsigned_charP).
    ((instanceof unsigned_charP_tag_table p unsigned_charP_tag) ->
     ((=) (typeof unsigned_charP_tag_table p) unsigned_charP_tag))))
  
  predicate frame_tag_struct_unsigned_charP (p : (pointer unsigned_charP))
  (old_unsigned_charP_tag_table : (tag_table unsigned_charP))
  (unsigned_charP_tag_table : (tag_table unsigned_charP))
  =
     ((tag_extends old_unsigned_charP_tag_table unsigned_charP_tag_table) /\
     (alloc_tag_block old_unsigned_charP_tag_table unsigned_charP_tag_table
     p))
  
  predicate frame_free_struct_unsigned_charP (p : (pointer unsigned_charP))
  (old_unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  =
     ((free_extends old_unsigned_charP_alloc_table unsigned_charP_alloc_table)
     /\
     (free_block old_unsigned_charP_alloc_table unsigned_charP_alloc_table p))
  
  predicate frame_alloc_struct_unsigned_charP (p : (pointer unsigned_charP))
  (n : int) (old_unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  =
     ((alloc_extends old_unsigned_charP_alloc_table
      unsigned_charP_alloc_table)
     /\
     (alloc_block old_unsigned_charP_alloc_table unsigned_charP_alloc_table p
     n))
  
  predicate fresh_tag_struct_unsigned_charP (p : (pointer unsigned_charP))
  (unsigned_charP_tag_table : (tag_table unsigned_charP))
  = (tag_fresh unsigned_charP_tag_table p)
  
  predicate fresh_alloc_struct_unsigned_charP (p : (pointer unsigned_charP))
  (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  = (alloc_fresh unsigned_charP_alloc_table p)
  
  predicate container_of_singleton_struct_unsigned_charP (p : (pointer
  unsigned_charP)) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  = true
  
  predicate container_of_struct_unsigned_charP (p : (pointer unsigned_charP))
  (l : int) (r : int) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  = true
  
  predicate typeof_singleton_struct_unsigned_charP (p : (pointer
  unsigned_charP)) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  = ((=) (typeof unsigned_charP_tag_table p) unsigned_charP_tag)
  
  predicate typeof_struct_unsigned_charP (p : (pointer unsigned_charP)) (l :
  int) (r : int) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  =
     (((=) (typeof unsigned_charP_tag_table p) unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof unsigned_charP_tag_table (shift p i)) unsigned_charP_tag))))
  
  predicate instanceof_singleton_struct_unsigned_charP (p : (pointer
  unsigned_charP)) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  = (instanceof unsigned_charP_tag_table p unsigned_charP_tag)
  
  predicate instanceof_struct_unsigned_charP (p : (pointer unsigned_charP))
  (l : int) (r : int) (unsigned_charP_tag_table : (tag_table unsigned_charP))
  =
     ((instanceof unsigned_charP_tag_table p unsigned_charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof unsigned_charP_tag_table (shift p i) unsigned_charP_tag))))
  
  predicate right_valid_struct_unsigned_charP (p : (pointer unsigned_charP))
  (b : int) (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  = ((>=) (offset_max unsigned_charP_alloc_table p) b)
  
  predicate left_valid_struct_unsigned_charP (p : (pointer unsigned_charP))
  (a : int) (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  = ((<=) (offset_min unsigned_charP_alloc_table p) a)
  
  predicate valid_struct_unsigned_charP (p : (pointer unsigned_charP)) (a :
  int) (b : int) (unsigned_charP_alloc_table : (alloc_table unsigned_charP))
  =
     (((<=) (offset_min unsigned_charP_alloc_table p) a) /\
     ((>=) (offset_max unsigned_charP_alloc_table p) b))
  
  predicate strict_valid_struct_unsigned_charP (p : (pointer unsigned_charP))
  (a : int) (b : int) (unsigned_charP_alloc_table : (alloc_table
  unsigned_charP))
  =
     (((=) (offset_min unsigned_charP_alloc_table p) a) /\
     ((=) (offset_max unsigned_charP_alloc_table p) b))
  
  axiom Unsigned_charP_int : ((=) (int_of_tag unsigned_charP_tag) (5))
  
end

module Struct_unsigned_charP_unsafe

  use import Struct_unsigned_charP 
  
  use import Root_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_unsigned_charP
  (p : (pointer unsigned_charP)) 
   (unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !unsigned_charP_alloc_table p)) }
    writes { unsigned_charP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_charP_alloc_table (old !unsigned_charP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_charP p (old !unsigned_charP_alloc_table)
       !unsigned_charP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !unsigned_charP_alloc_table)))
      }
  
  val allocate_struct_unsigned_charP_requires
  (n : int) 
   (unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)) 
    (unsigned_charP_tag_table : ref (tag_table unsigned_charP)) : (pointer
     unsigned_charP)
     requires { ((>=) n (0)) } writes { unsigned_charP_alloc_table,
     unsigned_charP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !unsigned_charP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old
        !unsigned_charP_alloc_table) !unsigned_charP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old
        !unsigned_charP_tag_table) !unsigned_charP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old
        !unsigned_charP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old
        !unsigned_charP_tag_table))
       /\
       ((typeof_struct_unsigned_charP result (0) n !unsigned_charP_tag_table)
       /\
       (container_of_struct_unsigned_charP result (0) n
       !unsigned_charP_tag_table))))))) }
  
end

module Struct_unsigned_charP_safe

  use import Struct_unsigned_charP 
  
  use import Root_unsigned_charP 
  
  use import ref.Ref 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_unsigned_charP
  (p : (pointer unsigned_charP)) 
   (unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)) : unit
    requires { true } writes { unsigned_charP_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !unsigned_charP_alloc_table (old !unsigned_charP_alloc_table)))
      \/
      ((frame_free_struct_unsigned_charP p (old !unsigned_charP_alloc_table)
       !unsigned_charP_alloc_table)
      /\ (fresh_alloc_struct_unsigned_charP p !unsigned_charP_alloc_table)))
      }
  
  val allocate_struct_unsigned_charP
  (n : int) 
   (unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)) 
    (unsigned_charP_tag_table : ref (tag_table unsigned_charP)) : (pointer
     unsigned_charP)
     requires { true } writes { unsigned_charP_alloc_table,
     unsigned_charP_tag_table }
     ensures {
       ((strict_valid_struct_unsigned_charP result (0) (Int.(-) n (1))
        !unsigned_charP_alloc_table)
       /\
       ((frame_alloc_struct_unsigned_charP result n (old
        !unsigned_charP_alloc_table) !unsigned_charP_alloc_table)
       /\
       ((frame_tag_struct_unsigned_charP result (old
        !unsigned_charP_tag_table) !unsigned_charP_tag_table)
       /\
       ((fresh_alloc_struct_unsigned_charP result (old
        !unsigned_charP_alloc_table))
       /\
       ((fresh_tag_struct_unsigned_charP result (old
        !unsigned_charP_tag_table))
       /\
       ((typeof_struct_unsigned_charP result (0) n !unsigned_charP_tag_table)
       /\
       (container_of_struct_unsigned_charP result (0) n
       !unsigned_charP_tag_table))))))) }
  
  val allocate_singleton_struct_unsigned_charP
  (unsigned_charP_alloc_table : ref (alloc_table unsigned_charP)) 
   (unsigned_charP_tag_table : ref (tag_table unsigned_charP)) : (pointer
    unsigned_charP)
    requires { true } writes { unsigned_charP_alloc_table,
    unsigned_charP_tag_table }
    ensures {
      ((strict_valid_struct_unsigned_charP result (0) (0)
       !unsigned_charP_alloc_table)
      /\
      ((frame_alloc_struct_unsigned_charP result (1) (old
       !unsigned_charP_alloc_table) !unsigned_charP_alloc_table)
      /\
      ((frame_tag_struct_unsigned_charP result (old
       !unsigned_charP_tag_table) !unsigned_charP_tag_table)
      /\
      ((fresh_alloc_struct_unsigned_charP result (old
       !unsigned_charP_alloc_table))
      /\
      ((fresh_tag_struct_unsigned_charP result (old
       !unsigned_charP_tag_table))
      /\
      ((typeof_singleton_struct_unsigned_charP result
       !unsigned_charP_tag_table)
      /\
      (container_of_singleton_struct_unsigned_charP result
      !unsigned_charP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_allocable 
  
  use import core.Jessie_alloc_table 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_alloc_table 
  
  use int.Int 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\ (fresh_alloc_struct_voidP p !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
       ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint8.to_int n)) }
  
end

theory Enum__bool_of_Uint8

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint8.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_uint8

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_uint8

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint8.to_int n)) }
  
end

theory Enum___anonenum_2_of_Uint8

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Uint8.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint64.to_int n)) }
  
end

theory Enum__bool_of_Uint64

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint64.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_uint64

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_uint64

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint64.to_int n)) }
  
end

theory Enum___anonenum_2_of_Uint64

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Uint64.to_int n))
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint32.to_int n)) }
  
end

theory Enum__bool_of_Uint32

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint32.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_uint32

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_uint32

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint32.to_int n)) }
  
end

theory Enum___anonenum_2_of_Uint32

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Uint32.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Uint16.to_int n)) }
  
end

theory Enum__bool_of_Uint16

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Enum__bool.t
  = (Enum__bool.of_int (Uint16.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_uint16

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_uint16

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Uint16.to_int n)) }
  
end

theory Enum___anonenum_2_of_Uint16

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Uint16.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int8.to_int n)) }
  
end

theory Enum__bool_of_Int8

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Enum__bool.t
  = (Enum__bool.of_int (Int8.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_int8

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_int8

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int8.to_int n)) }
  
end

theory Enum___anonenum_2_of_Int8

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Int8.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_enum__bool_of_Safe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int64.to_int n)) }
  
end

theory Enum__bool_of_Int64

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Enum__bool.t
  = (Enum__bool.of_int (Int64.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_int64

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_int64

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int64.to_int n)) }
  
end

theory Enum___anonenum_2_of_Int64

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Int64.to_int n))
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

theory Enum__bool_of_Int32

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Enum__bool.t
  = (Enum__bool.of_int (Int32.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_int32

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_int32

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int32.to_int n)) }
  
end

theory Enum___anonenum_2_of_Int32

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Int32.to_int n))
  
end

module Safe_enum__bool_of_Safe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { (Enum__bool.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Int16.to_int n)) }
  
end

theory Enum__bool_of_Int16

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Enum__bool.t
  = (Enum__bool.of_int (Int16.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_int16

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum___anonenum_2.t
   requires { (Enum___anonenum_2.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_int16

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Int16.to_int n)) }
  
end

theory Enum___anonenum_2_of_Int16

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Int16.to_int n))
  
end

module Safe_enum___anonenum_2_of_Safe_enum__bool

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_enum___anonenum_2_of_Unsafe_enum__bool

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Enum___anonenum_2.t
   requires { true }
   ensures { ((=) (Enum___anonenum_2.to_int result) (Enum__bool.to_int n)) }
  
end

theory Enum___anonenum_2_of_Enum__bool

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Enum___anonenum_2.t
  = (Enum___anonenum_2.of_int (Enum__bool.to_int n))
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint8_of_Safe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint8_of_Enum__bool

  use enum.Uint8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint8.t
  = (Uint8.of_int (Enum__bool.to_int n))
  
end

module Safe_uint8_of_Safe_enum___anonenum_2

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_enum___anonenum_2

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Uint8_of_Enum___anonenum_2

  use enum.Uint8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Uint8.t
  = (Uint8.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint64_of_Safe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint64_of_Enum__bool

  use enum.Uint64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint64.t
  = (Uint64.of_int (Enum__bool.to_int n))
  
end

module Safe_uint64_of_Safe_enum___anonenum_2

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_enum___anonenum_2

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Uint64_of_Enum___anonenum_2

  use enum.Uint64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Uint64.t
  = (Uint64.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint32_of_Safe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_enum__bool

  use enum.Uint32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum__bool.to_int n)) }
  
end

module Safe_uint32_of_Safe_enum___anonenum_2

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_enum___anonenum_2

  use enum.Uint32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_uint16_of_Safe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Uint16_of_Enum__bool

  use enum.Uint16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Uint16.t
  = (Uint16.of_int (Enum__bool.to_int n))
  
end

module Safe_uint16_of_Safe_enum___anonenum_2

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_enum___anonenum_2

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Uint16_of_Enum___anonenum_2

  use enum.Uint16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Uint16.t
  = (Uint16.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_int8_of_Safe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int8_of_Enum__bool

  use enum.Int8 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int8.t
  = (Int8.of_int (Enum__bool.to_int n))
  
end

module Safe_int8_of_Safe_enum___anonenum_2

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_enum___anonenum_2

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int8.t
   requires { true }
   ensures { ((=) (Int8.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Int8_of_Enum___anonenum_2

  use enum.Int8 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Int8.t
  = (Int8.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_int64_of_Safe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int64_of_Enum__bool

  use enum.Int64 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int64.t
  = (Int64.of_int (Enum__bool.to_int n))
  
end

module Safe_int64_of_Safe_enum___anonenum_2

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_enum___anonenum_2

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Int64_of_Enum___anonenum_2

  use enum.Int64 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Int64.t
  = (Int64.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Safe_int32_of_Safe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int32_of_Enum__bool

  use enum.Int32 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int32.t
  = (Int32.of_int (Enum__bool.to_int n))
  
end

module Safe_int32_of_Safe_enum___anonenum_2

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_enum___anonenum_2

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Int32_of_Enum___anonenum_2

  use enum.Int32 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Int32.t
  = (Int32.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_int16_of_Safe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum__bool.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum__bool.to_int n)) }
  
end

theory Int16_of_Enum__bool

  use enum.Int16 
  
  use Enum__bool 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum__bool.t) : Int16.t
  = (Int16.of_int (Enum__bool.to_int n))
  
end

module Safe_int16_of_Safe_enum___anonenum_2

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_enum___anonenum_2

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Int16_of_Enum___anonenum_2

  use enum.Int16 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Int16.t
  = (Int16.of_int (Enum___anonenum_2.to_int n))
  
end

module Safe_enum__bool_of_Safe_enum___anonenum_2

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

module Unsafe_enum__bool_of_Unsafe_enum___anonenum_2

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Enum___anonenum_2.t) : Enum__bool.t
   requires { true }
   ensures { ((=) (Enum__bool.to_int result) (Enum___anonenum_2.to_int n)) }
  
end

theory Enum__bool_of_Enum___anonenum_2

  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use why3.Bool.Bool 
  
  function cast (n : Enum___anonenum_2.t) : Enum__bool.t
  = (Enum__bool.of_int (Enum___anonenum_2.to_int n))
  
end

theory Logic_is_special

  use enum.Int8 
  
  use import int.Int 
  
  use why3.Bool.Bool 
  
  predicate is_special (c : int)
  =
     (((=) c
      (Int8.to_int (#"unescape.jc" 204 10 22# "expl:Integer cast"
      (Int8.of_int (34)))))
     \/
     (((=) c
      (Int8.to_int (#"unescape.jc" 204 46 58# "expl:Integer cast"
      (Int8.of_int (92)))))
     \/
     (((=) c
      (Int8.to_int (#"unescape.jc" 205 10 23# "expl:Integer cast"
      (Int8.of_int (101)))))
     \/
     ((=) c
     (Int8.to_int (#"unescape.jc" 206 9 21# "expl:Integer cast" (Int8.of_int
     (97))))))))
  
end

module Function_unescape_space_0

  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use int.Int 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Space 
  
  use why3.Bool.Bool 
  
  val unescape_space_0
  (src_5 : (pointer char_xP)) 
   (dst : (pointer char_xP)) 
    (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP))) 
     (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP))) 
      (charP_charM_char_xM_7 : ref (memory voidP Int8.t)) 
       (voidP_char_xM_7_alloc_table : (alloc_table voidP)) 
        (voidP_char_xM_6_alloc_table : (alloc_table voidP)) 
         (char_xP_dst_3_alloc_table : (alloc_table char_xP)) 
          (char_xP_src_5_2_alloc_table : (alloc_table char_xP)) 
           (voidP_char_xM_7_tag_table : (tag_table voidP)) 
            (voidP_char_xM_6_tag_table : (tag_table voidP)) 
             (charP_charM_char_xM_6 : (memory voidP Int8.t)) : Enum__bool.t
              requires { true } reads { charP_charM_char_xM_7,
              char_xP_char_xM_dst_3, char_xP_char_xM_src_5_2 } writes {
              charP_charM_char_xM_7, char_xP_char_xM_dst_3,
              char_xP_char_xM_src_5_2 }
              ensures {
                ((((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 96 38 51# "expl:Integer cast" (Int8.of_int
                   (110))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 97 39 52# "expl:Integer cast" (Int8.of_int
                   (116))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 98 38 51# "expl:Integer cast" (Int8.of_int
                   (114))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 99 37 50# "expl:Integer cast" (Int8.of_int
                   (118))))
                  /\
                  (Int8.(<>)
                  (select charP_charM_char_xM_6
                  (select (old !char_xP_char_xM_src_5_2) src_5))
                  (#"unescape.jc" 100 36 49# "expl:Integer cast" (Int8.of_int
                  (102)))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 36 16 32#
                  "expl:Ensures clause"
                  (Uint32.(=) (#"unescape.jc" 101 20 39# "expl:Integer cast"
                  (Uint32_of_Enum__bool.cast result))
                  (#"unescape.jc" 101 43 74# "expl:Integer cast"
                  (Uint32_of_Enum___anonenum_2.cast
                  (#"unescape.jc" 101 44 63# "expl:Integer cast"
                  (Enum___anonenum_2.of_int (0))))))))
                /\
                ((((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 81 38 51# "expl:Integer cast" (Int8.of_int
                   (110))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 82 39 52# "expl:Integer cast" (Int8.of_int
                   (116))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 83 38 51# "expl:Integer cast" (Int8.of_int
                   (114))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 84 37 50# "expl:Integer cast" (Int8.of_int
                   (118))))
                  \/
                  (Int8.(=)
                  (select charP_charM_char_xM_6
                  (select (old !char_xP_char_xM_src_5_2) src_5))
                  (#"unescape.jc" 85 36 49# "expl:Integer cast" (Int8.of_int
                  (102)))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 27 16 31#
                   "expl:Ensures clause"
                   (Uint32.(=) (#"unescape.jc" 86 30 49# "expl:Integer cast"
                   (Uint32_of_Enum__bool.cast result))
                   (#"unescape.jc" 87 31 62# "expl:Integer cast"
                   (Uint32_of_Enum___anonenum_2.cast
                   (#"unescape.jc" 87 32 51# "expl:Integer cast"
                   (Enum___anonenum_2.of_int (1)))))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 28 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_dst_3 dst)
                   (shift (select (old !char_xP_char_xM_dst_3) dst) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 29 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_src_5_2 src_5)
                   (shift (select (old !char_xP_char_xM_src_5_2) src_5) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 30 16 60#
                  "expl:Ensures clause"
                  (Int8.(=)
                  (select !charP_charM_char_xM_7
                  (shift (select !char_xP_char_xM_dst_3 dst) (Int.(-_) (1))))
                  (unescape_space
                  (Int8.to_int
                  (select charP_charM_char_xM_6
                  (shift (select !char_xP_char_xM_src_5_2 src_5)
                  (Int.(-_) (1))))))))))))))))
                /\
                (((#"unescape.jc" 76 10 59# "expl:Assigns clause"
                  (not_assigns voidP_char_xM_7_alloc_table
                  voidP_char_xM_7_alloc_table (old !charP_charM_char_xM_7)
                  !charP_charM_char_xM_7
                  (pset_singleton (select (old !char_xP_char_xM_dst_3) dst))))
                 /\
                 (#"unescape.jc" 76 10 59# "expl:Assigns clause"
                 (not_assigns char_xP_src_5_2_alloc_table
                 char_xP_src_5_2_alloc_table (old !char_xP_char_xM_src_5_2)
                 !char_xP_char_xM_src_5_2 (pset_singleton src_5))))
                /\
                (#"unescape.jc" 76 10 59# "expl:Assigns clause"
                (not_assigns char_xP_dst_3_alloc_table
                char_xP_dst_3_alloc_table (old !char_xP_char_xM_dst_3)
                !char_xP_char_xM_dst_3 (pset_singleton dst)))))) }
  
end

module Function_unescape_space_0_safe

  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Space 
  
  use why3.Bool.Bool 
  
  val unescape_space_0
  (src_5 : (pointer char_xP)) 
   (dst : (pointer char_xP)) 
    (char_xP_char_xM_dst_3 : ref (memory char_xP (pointer voidP))) 
     (char_xP_char_xM_src_5_2 : ref (memory char_xP (pointer voidP))) 
      (charP_charM_char_xM_7 : ref (memory voidP Int8.t)) 
       (voidP_char_xM_7_alloc_table : (alloc_table voidP)) 
        (voidP_char_xM_6_alloc_table : (alloc_table voidP)) 
         (char_xP_dst_3_alloc_table : (alloc_table char_xP)) 
          (char_xP_src_5_2_alloc_table : (alloc_table char_xP)) 
           (voidP_char_xM_7_tag_table : (tag_table voidP)) 
            (voidP_char_xM_6_tag_table : (tag_table voidP)) 
             (charP_charM_char_xM_6 : (memory voidP Int8.t)) : Enum__bool.t
              requires {
                ("expl:Internal"
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 19 10 22#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((<=) (offset_min char_xP_src_5_2_alloc_table src_5) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((>=) (offset_max char_xP_src_5_2_alloc_table src_5) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 19 26 38#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((<=) (offset_min char_xP_dst_3_alloc_table dst) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((>=) (offset_max char_xP_dst_3_alloc_table dst) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 20 4 17#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((<=)
                  (offset_min voidP_char_xM_6_alloc_table
                  (select !char_xP_char_xM_src_5_2 src_5)) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                  "expl:Requires clause"
                  ((>=)
                  (offset_max voidP_char_xM_6_alloc_table
                  (select !char_xP_char_xM_src_5_2 src_5)) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 20 21 33#
                "expl:Requires clause"
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((<=)
                 (offset_min voidP_char_xM_7_alloc_table
                 (select !char_xP_char_xM_dst_3 dst)) (0)))
                /\
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 19 10 75#
                 "expl:Requires clause"
                 ((>=)
                 (offset_max voidP_char_xM_7_alloc_table
                 (select !char_xP_char_xM_dst_3 dst)) (0)))
                /\
                (#"/home/maria/ded-rep/unescape.c" 19 10 75#
                "expl:Requires clause" ((=) true true))))))))))))))) }
              reads { charP_charM_char_xM_7, char_xP_char_xM_dst_3,
              char_xP_char_xM_src_5_2 } writes { charP_charM_char_xM_7,
              char_xP_char_xM_dst_3, char_xP_char_xM_src_5_2 }
              ensures {
                ((((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 96 38 51# "expl:Integer cast" (Int8.of_int
                   (110))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 97 39 52# "expl:Integer cast" (Int8.of_int
                   (116))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 98 38 51# "expl:Integer cast" (Int8.of_int
                   (114))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 99 37 50# "expl:Integer cast" (Int8.of_int
                   (118))))
                  /\
                  (Int8.(<>)
                  (select charP_charM_char_xM_6
                  (select (old !char_xP_char_xM_src_5_2) src_5))
                  (#"unescape.jc" 100 36 49# "expl:Integer cast" (Int8.of_int
                  (102)))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 36 16 32#
                  "expl:Ensures clause"
                  (Uint32.(=) (#"unescape.jc" 101 20 39# "expl:Integer cast"
                  (Uint32_of_Enum__bool.cast result))
                  (#"unescape.jc" 101 43 74# "expl:Integer cast"
                  (Uint32_of_Enum___anonenum_2.cast
                  (#"unescape.jc" 101 44 63# "expl:Integer cast"
                  (Enum___anonenum_2.of_int (0))))))))
                /\
                ((((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 81 38 51# "expl:Integer cast" (Int8.of_int
                   (110))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 82 39 52# "expl:Integer cast" (Int8.of_int
                   (116))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 83 38 51# "expl:Integer cast" (Int8.of_int
                   (114))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_6
                   (select (old !char_xP_char_xM_src_5_2) src_5))
                   (#"unescape.jc" 84 37 50# "expl:Integer cast" (Int8.of_int
                   (118))))
                  \/
                  (Int8.(=)
                  (select charP_charM_char_xM_6
                  (select (old !char_xP_char_xM_src_5_2) src_5))
                  (#"unescape.jc" 85 36 49# "expl:Integer cast" (Int8.of_int
                  (102)))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 27 16 31#
                   "expl:Ensures clause"
                   (Uint32.(=) (#"unescape.jc" 86 30 49# "expl:Integer cast"
                   (Uint32_of_Enum__bool.cast result))
                   (#"unescape.jc" 87 31 62# "expl:Integer cast"
                   (Uint32_of_Enum___anonenum_2.cast
                   (#"unescape.jc" 87 32 51# "expl:Integer cast"
                   (Enum___anonenum_2.of_int (1)))))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 28 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_dst_3 dst)
                   (shift (select (old !char_xP_char_xM_dst_3) dst) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 27 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 29 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_src_5_2 src_5)
                   (shift (select (old !char_xP_char_xM_src_5_2) src_5) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 30 16 60#
                  "expl:Ensures clause"
                  (Int8.(=)
                  (select !charP_charM_char_xM_7
                  (shift (select !char_xP_char_xM_dst_3 dst) (Int.(-_) (1))))
                  (unescape_space
                  (Int8.to_int
                  (select charP_charM_char_xM_6
                  (shift (select !char_xP_char_xM_src_5_2 src_5)
                  (Int.(-_) (1))))))))))))))))
                /\
                (((#"unescape.jc" 76 10 59# "expl:Assigns clause"
                  (not_assigns voidP_char_xM_7_alloc_table
                  voidP_char_xM_7_alloc_table (old !charP_charM_char_xM_7)
                  !charP_charM_char_xM_7
                  (pset_singleton (select (old !char_xP_char_xM_dst_3) dst))))
                 /\
                 (#"unescape.jc" 76 10 59# "expl:Assigns clause"
                 (not_assigns char_xP_src_5_2_alloc_table
                 char_xP_src_5_2_alloc_table (old !char_xP_char_xM_src_5_2)
                 !char_xP_char_xM_src_5_2 (pset_singleton src_5))))
                /\
                (#"unescape.jc" 76 10 59# "expl:Assigns clause"
                (not_assigns char_xP_dst_3_alloc_table
                char_xP_dst_3_alloc_table (old !char_xP_char_xM_dst_3)
                !char_xP_char_xM_dst_3 (pset_singleton dst)))))) }
  
end

module Function_unescape_special_0

  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use int.Int 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Special 
  
  use why3.Bool.Bool 
  
  val unescape_special_0
  (src_6 : (pointer char_xP)) 
   (dst_0 : (pointer char_xP)) 
    (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP))) 
     (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP))) 
      (charP_charM_char_xM_11 : ref (memory voidP Int8.t)) 
       (voidP_char_xM_11_alloc_table : (alloc_table voidP)) 
        (voidP_char_xM_10_alloc_table : (alloc_table voidP)) 
         (char_xP_dst_0_5_alloc_table : (alloc_table char_xP)) 
          (char_xP_src_6_4_alloc_table : (alloc_table char_xP)) 
           (voidP_char_xM_11_tag_table : (tag_table voidP)) 
            (voidP_char_xM_10_tag_table : (tag_table voidP)) 
             (charP_charM_char_xM_10 : (memory voidP Int8.t)) : Enum__bool.t
              requires { true } reads { charP_charM_char_xM_11,
              char_xP_char_xM_dst_0_5, char_xP_char_xM_src_6_4 } writes {
              charP_charM_char_xM_11, char_xP_char_xM_dst_0_5,
              char_xP_char_xM_src_6_4 }
              ensures {
                ((((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 249 37 49# "expl:Integer cast"
                   (Int8.of_int (34))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 250 38 50# "expl:Integer cast"
                   (Int8.of_int (92))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 251 37 50# "expl:Integer cast"
                   (Int8.of_int (101))))
                  /\
                  (Int8.(<>)
                  (select charP_charM_char_xM_10
                  (select (old !char_xP_char_xM_src_6_4) src_6))
                  (#"unescape.jc" 252 36 48# "expl:Integer cast" (Int8.of_int
                  (97))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 97 17 33#
                  "expl:Ensures clause"
                  (Uint32.(=) (#"unescape.jc" 253 21 40# "expl:Integer cast"
                  (Uint32_of_Enum__bool.cast result))
                  (#"unescape.jc" 253 44 75# "expl:Integer cast"
                  (Uint32_of_Enum___anonenum_2.cast
                  (#"unescape.jc" 253 45 64# "expl:Integer cast"
                  (Enum___anonenum_2.of_int (0))))))))
                /\
                ((((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 235 37 49# "expl:Integer cast"
                   (Int8.of_int (34))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 236 38 50# "expl:Integer cast"
                   (Int8.of_int (92))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 237 37 50# "expl:Integer cast"
                   (Int8.of_int (101))))
                  \/
                  (Int8.(=)
                  (select charP_charM_char_xM_10
                  (select (old !char_xP_char_xM_src_6_4) src_6))
                  (#"unescape.jc" 238 36 48# "expl:Integer cast" (Int8.of_int
                  (97))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 89 16 31#
                   "expl:Ensures clause"
                   (Uint32.(=) (#"unescape.jc" 239 32 51# "expl:Integer cast"
                   (Uint32_of_Enum__bool.cast result))
                   (#"unescape.jc" 240 33 64# "expl:Integer cast"
                   (Uint32_of_Enum___anonenum_2.cast
                   (#"unescape.jc" 240 34 53# "expl:Integer cast"
                   (Enum___anonenum_2.of_int (1)))))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 90 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_dst_0_5 dst_0)
                   (shift (select (old !char_xP_char_xM_dst_0_5) dst_0) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 91 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_src_6_4 src_6)
                   (shift (select (old !char_xP_char_xM_src_6_4) src_6) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 92 16 62#
                  "expl:Ensures clause"
                  (Int8.(=)
                  (select !charP_charM_char_xM_11
                  (shift (select !char_xP_char_xM_dst_0_5 dst_0)
                  (Int.(-_) (1))))
                  (unescape_special
                  (select charP_charM_char_xM_10
                  (shift (select !char_xP_char_xM_src_6_4 src_6)
                  (Int.(-_) (1)))))))))))))))
                /\
                (((#"unescape.jc" 230 10 63# "expl:Assigns clause"
                  (not_assigns voidP_char_xM_11_alloc_table
                  voidP_char_xM_11_alloc_table (old !charP_charM_char_xM_11)
                  !charP_charM_char_xM_11
                  (pset_singleton
                  (select (old !char_xP_char_xM_dst_0_5) dst_0))))
                 /\
                 (#"unescape.jc" 230 10 63# "expl:Assigns clause"
                 (not_assigns char_xP_src_6_4_alloc_table
                 char_xP_src_6_4_alloc_table (old !char_xP_char_xM_src_6_4)
                 !char_xP_char_xM_src_6_4 (pset_singleton src_6))))
                /\
                (#"unescape.jc" 230 10 63# "expl:Assigns clause"
                (not_assigns char_xP_dst_0_5_alloc_table
                char_xP_dst_0_5_alloc_table (old !char_xP_char_xM_dst_0_5)
                !char_xP_char_xM_dst_0_5 (pset_singleton dst_0)))))) }
  
end

module Function_unescape_special_0_safe

  use Uint32_of_Enum__bool 
  
  use Uint32_of_Enum___anonenum_2 
  
  use enum.Uint32 
  
  use import Root_char_xP 
  
  use import ref.Ref 
  
  use import core.Jessie_voidp 
  
  use import core.Jessie_tag_table_type 
  
  use import core.Jessie_pset 
  
  use import core.Jessie_pointer 
  
  use import core.Jessie_memory 
  
  use import core.Jessie_assigns 
  
  use import core.Jessie_alloc_table 
  
  use enum.Int8 
  
  use import int.Int 
  
  use Enum__bool 
  
  use Enum___anonenum_2 
  
  use import Axiomatic_Un_Special 
  
  use why3.Bool.Bool 
  
  val unescape_special_0
  (src_6 : (pointer char_xP)) 
   (dst_0 : (pointer char_xP)) 
    (char_xP_char_xM_dst_0_5 : ref (memory char_xP (pointer voidP))) 
     (char_xP_char_xM_src_6_4 : ref (memory char_xP (pointer voidP))) 
      (charP_charM_char_xM_11 : ref (memory voidP Int8.t)) 
       (voidP_char_xM_11_alloc_table : (alloc_table voidP)) 
        (voidP_char_xM_10_alloc_table : (alloc_table voidP)) 
         (char_xP_dst_0_5_alloc_table : (alloc_table char_xP)) 
          (char_xP_src_6_4_alloc_table : (alloc_table char_xP)) 
           (voidP_char_xM_11_tag_table : (tag_table voidP)) 
            (voidP_char_xM_10_tag_table : (tag_table voidP)) 
             (charP_charM_char_xM_10 : (memory voidP Int8.t)) : Enum__bool.t
              requires {
                ("expl:Internal"
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 82 10 22#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((<=) (offset_min char_xP_src_6_4_alloc_table src_6) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((>=) (offset_max char_xP_src_6_4_alloc_table src_6) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 82 26 38#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((<=) (offset_min char_xP_dst_0_5_alloc_table dst_0) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((>=) (offset_max char_xP_dst_0_5_alloc_table dst_0) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 83 4 17#
                 "expl:Requires clause"
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((<=)
                  (offset_min voidP_char_xM_10_alloc_table
                  (select !char_xP_char_xM_src_6_4 src_6)) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                  "expl:Requires clause"
                  ((>=)
                  (offset_max voidP_char_xM_10_alloc_table
                  (select !char_xP_char_xM_src_6_4 src_6)) (0)))
                 /\
                 (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause" ((=) true true)))))))
                /\
                (#"/home/maria/ded-rep/unescape.c" 83 21 33#
                "expl:Requires clause"
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((<=)
                 (offset_min voidP_char_xM_11_alloc_table
                 (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
                /\
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause"
                ((#"/home/maria/ded-rep/unescape.c" 82 10 85#
                 "expl:Requires clause"
                 ((>=)
                 (offset_max voidP_char_xM_11_alloc_table
                 (select !char_xP_char_xM_dst_0_5 dst_0)) (0)))
                /\
                (#"/home/maria/ded-rep/unescape.c" 82 10 85#
                "expl:Requires clause" ((=) true true))))))))))))))) }
              reads { charP_charM_char_xM_11, char_xP_char_xM_dst_0_5,
              char_xP_char_xM_src_6_4 } writes { charP_charM_char_xM_11,
              char_xP_char_xM_dst_0_5, char_xP_char_xM_src_6_4 }
              ensures {
                ((((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 249 37 49# "expl:Integer cast"
                   (Int8.of_int (34))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 250 38 50# "expl:Integer cast"
                   (Int8.of_int (92))))
                  /\
                  ((Int8.(<>)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 251 37 50# "expl:Integer cast"
                   (Int8.of_int (101))))
                  /\
                  (Int8.(<>)
                  (select charP_charM_char_xM_10
                  (select (old !char_xP_char_xM_src_6_4) src_6))
                  (#"unescape.jc" 252 36 48# "expl:Integer cast" (Int8.of_int
                  (97))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 97 17 33#
                  "expl:Ensures clause"
                  (Uint32.(=) (#"unescape.jc" 253 21 40# "expl:Integer cast"
                  (Uint32_of_Enum__bool.cast result))
                  (#"unescape.jc" 253 44 75# "expl:Integer cast"
                  (Uint32_of_Enum___anonenum_2.cast
                  (#"unescape.jc" 253 45 64# "expl:Integer cast"
                  (Enum___anonenum_2.of_int (0))))))))
                /\
                ((((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 235 37 49# "expl:Integer cast"
                   (Int8.of_int (34))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 236 38 50# "expl:Integer cast"
                   (Int8.of_int (92))))
                  \/
                  ((Int8.(=)
                   (select charP_charM_char_xM_10
                   (select (old !char_xP_char_xM_src_6_4) src_6))
                   (#"unescape.jc" 237 37 50# "expl:Integer cast"
                   (Int8.of_int (101))))
                  \/
                  (Int8.(=)
                  (select charP_charM_char_xM_10
                  (select (old !char_xP_char_xM_src_6_4) src_6))
                  (#"unescape.jc" 238 36 48# "expl:Integer cast" (Int8.of_int
                  (97))))))) ->
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 89 16 31#
                   "expl:Ensures clause"
                   (Uint32.(=) (#"unescape.jc" 239 32 51# "expl:Integer cast"
                   (Uint32_of_Enum__bool.cast result))
                   (#"unescape.jc" 240 33 64# "expl:Integer cast"
                   (Uint32_of_Enum___anonenum_2.cast
                   (#"unescape.jc" 240 34 53# "expl:Integer cast"
                   (Enum___anonenum_2.of_int (1)))))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 90 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_dst_0_5 dst_0)
                   (shift (select (old !char_xP_char_xM_dst_0_5) dst_0) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 89 16 31#
                  "expl:Ensures clause"
                  ((#"/home/maria/ded-rep/unescape.c" 91 16 38#
                   "expl:Ensures clause"
                   ((=) (select !char_xP_char_xM_src_6_4 src_6)
                   (shift (select (old !char_xP_char_xM_src_6_4) src_6) (1))))
                  /\
                  (#"/home/maria/ded-rep/unescape.c" 92 16 62#
                  "expl:Ensures clause"
                  (Int8.(=)
                  (select !charP_charM_char_xM_11
                  (shift (select !char_xP_char_xM_dst_0_5 dst_0)
                  (Int.(-_) (1))))
                  (unescape_special
                  (select charP_charM_char_xM_10
                  (shift (select !char_xP_char_xM_src_6_4 src_6)
                  (Int.(-_) (1)))))))))))))))
                /\
                (((#"unescape.jc" 230 10 63# "expl:Assigns clause"
                  (not_assigns voidP_char_xM_11_alloc_table
                  voidP_char_xM_11_alloc_table (old !charP_charM_char_xM_11)
                  !charP_charM_char_xM_11
                  (pset_singleton
                  (select (old !char_xP_char_xM_dst_0_5) dst_0))))
                 /\
                 (#"unescape.jc" 230 10 63# "expl:Assigns clause"
                 (not_assigns char_xP_src_6_4_alloc_table
                 char_xP_src_6_4_alloc_table (old !char_xP_char_xM_src_6_4)
                 !char_xP_char_xM_src_6_4 (pset_singleton src_6))))
                /\
                (#"unescape.jc" 230 10 63# "expl:Assigns clause"
                (not_assigns char_xP_dst_0_5_alloc_table
                char_xP_dst_0_5_alloc_table (old !char_xP_char_xM_dst_0_5)
                !char_xP_char_xM_dst_0_5 (pset_singleton dst_0)))))) }
  
end
